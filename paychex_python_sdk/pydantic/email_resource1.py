# coding: utf-8

"""
    External API

      # Developer Resources  Refer [Developer Resources](https://developer.paychex.com/resources/overview/) for more details on API specification 

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from paychex_python_sdk.pydantic.link import Link
from paychex_python_sdk.pydantic.worker_error_resource import WorkerErrorResource

class EmailResource1(BaseModel):
    primary_email: typing.Optional[str] = Field(None, alias='primaryEmail')

    secondary_email: typing.Optional[str] = Field(None, alias='secondaryEmail')

    connection_name: typing.Optional[str] = Field(None, alias='connectionName')

    display_id: typing.Optional[str] = Field(None, alias='displayId')

    legal_name: typing.Optional[str] = Field(None, alias='legalName')

    notification_type: typing.Optional[Literal["CONNECTION_ERROR", "DATA_ERROR", "WORKER_CHECK_ERROR", "MULTI_ID_SPI_REJECT", "EMPLOYEE_OVERTIME_NOTIFICATION", "COMPANY_PAY_PERIOD_ERROR", "PAYROLL_CONFIRMATION", "COMPANY_JOBCODE", "OFFBOARDING_SURVEY", "OFFBOARDING_ERROR", "WORKER_PUNCH_OR_ADJUSTMENT_ERROR", "WORKER_SCHEDULE_ERROR"]] = Field(None, alias='notificationType')

    worker_errors: typing.Optional[typing.List[WorkerErrorResource]] = Field(None, alias='workerErrors')

    pay_period: typing.Optional[str] = Field(None, alias='payPeriod')

    partner_location_id: typing.Optional[str] = Field(None, alias='partnerLocationId')

    state: typing.Optional[str] = Field(None, alias='state')

    source_job_name: typing.Optional[str] = Field(None, alias='sourceJobName')

    bcc: typing.Optional[str] = Field(None, alias='bcc')

    employee_first_name: typing.Optional[str] = Field(None, alias='employeeFirstName')

    employee_last_name: typing.Optional[str] = Field(None, alias='employeeLastName')

    link_to_survey: typing.Optional[str] = Field(None, alias='linkToSurvey')

    links: typing.Optional[typing.List[Link]] = Field(None, alias='links')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
