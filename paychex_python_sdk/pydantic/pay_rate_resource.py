# coding: utf-8

"""
    External API

      # Developer Resources  Refer [Developer Resources](https://developer.paychex.com/resources/overview/) for more details on API specification 

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from paychex_python_sdk.pydantic.link import Link

class PayRateResource(BaseModel):
    # Describes the rate for the worker.
    description: typing.Optional[str] = Field(None, alias='description')

    # Unique identifier for this workers pay rate. **This ID will change if this is created for an IN_PROGRESS worker that is later completed within Flex**
    rate_id: typing.Optional[str] = Field(None, alias='rateId')

    # The date when the pay rate is going to begin.
    start_date: typing.Optional[datetime] = Field(None, alias='startDate')

    # The number of the rate. A worker can have up to 5 different rates.
    rate_number: typing.Optional[str] = Field(None, alias='rateNumber')

    # Type of rate.
    rate_type: typing.Optional[Literal["ANNUAL_SALARY", "PER_PAY_PERIOD_SALARY", "PIECEWORK_RATE", "DAILY_RATE", "HOURLY_RATE"]] = Field(None, alias='rateType')

    # The currency amount which this rate is applied.
    amount: typing.Optional[str] = Field(None, alias='amount')

    # Default standard hours that this rate is used with a pay frequency.
    standard_hours: typing.Optional[str] = Field(None, alias='standardHours')

    # Default over time hours that this rate is used with a pay frequency.
    standard_overtime: typing.Optional[str] = Field(None, alias='standardOvertime')

    # If this rate is the default one to apply on the worker.
    default: typing.Optional[bool] = Field(None, alias='default')

    # The date when the pay rate becomes effective for the worker.(can be used only in POST/PATCH for an active worker)
    effective_date: typing.Optional[str] = Field(None, alias='effectiveDate')

    links: typing.Optional[typing.List[Link]] = Field(None, alias='links')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
