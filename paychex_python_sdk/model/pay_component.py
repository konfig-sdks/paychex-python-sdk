# coding: utf-8

"""
    External API

      # Developer Resources  Refer [Developer Resources](https://developer.paychex.com/resources/overview/) for more details on API specification 

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from paychex_python_sdk import schemas  # noqa: F401


class PayComponent(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A pay component defined for a client
    """


    class MetaOapg:
        
        class properties:
            cltpcId = schemas.Int64Schema
            offeringId = schemas.StrSchema
            pcId = schemas.Int64Schema
            customName = schemas.StrSchema
            reportCode = schemas.StrSchema
            isPaychexAdministered = schemas.BoolSchema
            deductionPriority = schemas.Int32Schema
            refId = schemas.Int64Schema
            payCompName = schemas.StrSchema
            payCpntTypeId = schemas.Int64Schema
            payCpntType = schemas.StrSchema
            classTypeId = schemas.Int64Schema
            classType = schemas.StrSchema
            payFreqId = schemas.Int64Schema
            payFreq = schemas.StrSchema
            freqTypeId = schemas.Int64Schema
            freqType = schemas.StrSchema
            firstCheckRuleId = schemas.Int64Schema
            firstCheckRule = schemas.StrSchema
            isBankRequired = schemas.BoolSchema
            collectArrearsOnShortfall = schemas.BoolSchema
            startDate = schemas.DateTimeSchema
            endDate = schemas.DateTimeSchema
            __annotations__ = {
                "cltpcId": cltpcId,
                "offeringId": offeringId,
                "pcId": pcId,
                "customName": customName,
                "reportCode": reportCode,
                "isPaychexAdministered": isPaychexAdministered,
                "deductionPriority": deductionPriority,
                "refId": refId,
                "payCompName": payCompName,
                "payCpntTypeId": payCpntTypeId,
                "payCpntType": payCpntType,
                "classTypeId": classTypeId,
                "classType": classType,
                "payFreqId": payFreqId,
                "payFreq": payFreq,
                "freqTypeId": freqTypeId,
                "freqType": freqType,
                "firstCheckRuleId": firstCheckRuleId,
                "firstCheckRule": firstCheckRule,
                "isBankRequired": isBankRequired,
                "collectArrearsOnShortfall": collectArrearsOnShortfall,
                "startDate": startDate,
                "endDate": endDate,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cltpcId"]) -> MetaOapg.properties.cltpcId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["offeringId"]) -> MetaOapg.properties.offeringId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pcId"]) -> MetaOapg.properties.pcId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customName"]) -> MetaOapg.properties.customName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reportCode"]) -> MetaOapg.properties.reportCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isPaychexAdministered"]) -> MetaOapg.properties.isPaychexAdministered: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductionPriority"]) -> MetaOapg.properties.deductionPriority: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refId"]) -> MetaOapg.properties.refId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payCompName"]) -> MetaOapg.properties.payCompName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payCpntTypeId"]) -> MetaOapg.properties.payCpntTypeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payCpntType"]) -> MetaOapg.properties.payCpntType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["classTypeId"]) -> MetaOapg.properties.classTypeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["classType"]) -> MetaOapg.properties.classType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payFreqId"]) -> MetaOapg.properties.payFreqId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payFreq"]) -> MetaOapg.properties.payFreq: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["freqTypeId"]) -> MetaOapg.properties.freqTypeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["freqType"]) -> MetaOapg.properties.freqType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstCheckRuleId"]) -> MetaOapg.properties.firstCheckRuleId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstCheckRule"]) -> MetaOapg.properties.firstCheckRule: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isBankRequired"]) -> MetaOapg.properties.isBankRequired: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collectArrearsOnShortfall"]) -> MetaOapg.properties.collectArrearsOnShortfall: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endDate"]) -> MetaOapg.properties.endDate: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cltpcId", "offeringId", "pcId", "customName", "reportCode", "isPaychexAdministered", "deductionPriority", "refId", "payCompName", "payCpntTypeId", "payCpntType", "classTypeId", "classType", "payFreqId", "payFreq", "freqTypeId", "freqType", "firstCheckRuleId", "firstCheckRule", "isBankRequired", "collectArrearsOnShortfall", "startDate", "endDate", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cltpcId"]) -> typing.Union[MetaOapg.properties.cltpcId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["offeringId"]) -> typing.Union[MetaOapg.properties.offeringId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pcId"]) -> typing.Union[MetaOapg.properties.pcId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customName"]) -> typing.Union[MetaOapg.properties.customName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reportCode"]) -> typing.Union[MetaOapg.properties.reportCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isPaychexAdministered"]) -> typing.Union[MetaOapg.properties.isPaychexAdministered, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductionPriority"]) -> typing.Union[MetaOapg.properties.deductionPriority, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refId"]) -> typing.Union[MetaOapg.properties.refId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payCompName"]) -> typing.Union[MetaOapg.properties.payCompName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payCpntTypeId"]) -> typing.Union[MetaOapg.properties.payCpntTypeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payCpntType"]) -> typing.Union[MetaOapg.properties.payCpntType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["classTypeId"]) -> typing.Union[MetaOapg.properties.classTypeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["classType"]) -> typing.Union[MetaOapg.properties.classType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payFreqId"]) -> typing.Union[MetaOapg.properties.payFreqId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payFreq"]) -> typing.Union[MetaOapg.properties.payFreq, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["freqTypeId"]) -> typing.Union[MetaOapg.properties.freqTypeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["freqType"]) -> typing.Union[MetaOapg.properties.freqType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstCheckRuleId"]) -> typing.Union[MetaOapg.properties.firstCheckRuleId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstCheckRule"]) -> typing.Union[MetaOapg.properties.firstCheckRule, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isBankRequired"]) -> typing.Union[MetaOapg.properties.isBankRequired, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collectArrearsOnShortfall"]) -> typing.Union[MetaOapg.properties.collectArrearsOnShortfall, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startDate"]) -> typing.Union[MetaOapg.properties.startDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endDate"]) -> typing.Union[MetaOapg.properties.endDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cltpcId", "offeringId", "pcId", "customName", "reportCode", "isPaychexAdministered", "deductionPriority", "refId", "payCompName", "payCpntTypeId", "payCpntType", "classTypeId", "classType", "payFreqId", "payFreq", "freqTypeId", "freqType", "firstCheckRuleId", "firstCheckRule", "isBankRequired", "collectArrearsOnShortfall", "startDate", "endDate", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        cltpcId: typing.Union[MetaOapg.properties.cltpcId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        offeringId: typing.Union[MetaOapg.properties.offeringId, str, schemas.Unset] = schemas.unset,
        pcId: typing.Union[MetaOapg.properties.pcId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        customName: typing.Union[MetaOapg.properties.customName, str, schemas.Unset] = schemas.unset,
        reportCode: typing.Union[MetaOapg.properties.reportCode, str, schemas.Unset] = schemas.unset,
        isPaychexAdministered: typing.Union[MetaOapg.properties.isPaychexAdministered, bool, schemas.Unset] = schemas.unset,
        deductionPriority: typing.Union[MetaOapg.properties.deductionPriority, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        refId: typing.Union[MetaOapg.properties.refId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        payCompName: typing.Union[MetaOapg.properties.payCompName, str, schemas.Unset] = schemas.unset,
        payCpntTypeId: typing.Union[MetaOapg.properties.payCpntTypeId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        payCpntType: typing.Union[MetaOapg.properties.payCpntType, str, schemas.Unset] = schemas.unset,
        classTypeId: typing.Union[MetaOapg.properties.classTypeId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        classType: typing.Union[MetaOapg.properties.classType, str, schemas.Unset] = schemas.unset,
        payFreqId: typing.Union[MetaOapg.properties.payFreqId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        payFreq: typing.Union[MetaOapg.properties.payFreq, str, schemas.Unset] = schemas.unset,
        freqTypeId: typing.Union[MetaOapg.properties.freqTypeId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        freqType: typing.Union[MetaOapg.properties.freqType, str, schemas.Unset] = schemas.unset,
        firstCheckRuleId: typing.Union[MetaOapg.properties.firstCheckRuleId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        firstCheckRule: typing.Union[MetaOapg.properties.firstCheckRule, str, schemas.Unset] = schemas.unset,
        isBankRequired: typing.Union[MetaOapg.properties.isBankRequired, bool, schemas.Unset] = schemas.unset,
        collectArrearsOnShortfall: typing.Union[MetaOapg.properties.collectArrearsOnShortfall, bool, schemas.Unset] = schemas.unset,
        startDate: typing.Union[MetaOapg.properties.startDate, str, datetime, schemas.Unset] = schemas.unset,
        endDate: typing.Union[MetaOapg.properties.endDate, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PayComponent':
        return super().__new__(
            cls,
            *args,
            cltpcId=cltpcId,
            offeringId=offeringId,
            pcId=pcId,
            customName=customName,
            reportCode=reportCode,
            isPaychexAdministered=isPaychexAdministered,
            deductionPriority=deductionPriority,
            refId=refId,
            payCompName=payCompName,
            payCpntTypeId=payCpntTypeId,
            payCpntType=payCpntType,
            classTypeId=classTypeId,
            classType=classType,
            payFreqId=payFreqId,
            payFreq=payFreq,
            freqTypeId=freqTypeId,
            freqType=freqType,
            firstCheckRuleId=firstCheckRuleId,
            firstCheckRule=firstCheckRule,
            isBankRequired=isBankRequired,
            collectArrearsOnShortfall=collectArrearsOnShortfall,
            startDate=startDate,
            endDate=endDate,
            _configuration=_configuration,
            **kwargs,
        )
