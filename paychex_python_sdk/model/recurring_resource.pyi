# coding: utf-8

"""
    External API

      # Developer Resources  Refer [Developer Resources](https://developer.paychex.com/resources/overview/) for more details on API specification 

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from paychex_python_sdk import schemas  # noqa: F401


class RecurringResource(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Worker recurring deduction
    """


    class MetaOapg:
        
        class properties:
            workerComponentId = schemas.StrSchema
            componentId = schemas.StrSchema
            name = schemas.StrSchema
            
            
            class calculationType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def FLAT_DOLLAR_AMOUNTTHIS_IS_USED_FOR_A_SPECIFIC_DOLLAR_AMOUNT(cls):
                    return cls("FLAT_DOLLAR_AMOUNT:This is used for a specific dollar amount")
                
                @schemas.classproperty
                def PERCENTAGETHIS_IS_USED_FOR_WHEN_A_PERCENTAGE_WILL_BE_USED_TO_CALCULATE_THE_AMOUNT_AND_WILL_NEED_A_CALCULATION_BASE_ID_TO_SPECIFY_WHAT_TO_APPLY_AGAINST(cls):
                    return cls("PERCENTAGE:This is used for when a Percentage will be used to calculate the amount and will need a calculationBaseId to specify what to apply against")
                
                @schemas.classproperty
                def RATE_X_UNITSTHIS_IS_USED_FOR_APPLY_THE_RATE_AGAINST_UNITS_AND_WILL_NEED_A_CALCULATION_BASE_ID_TO_SPECIFY_WHAT_TO_APPLY_AGAINST(cls):
                    return cls("RATE_X_UNITS:This is used for apply the rate against units and will need a calculationBaseId to specify what to apply against")
                
                @schemas.classproperty
                def RATE_X_HOURSTHIS_IS_USED_FOR_APPLY_THE_RATE_AGAINST_HOURS_AND_WILL_NEED_A_CALCULATION_BASE_ID_TO_SPECIFY_WHAT_TO_APPLY_AGAINST_(cls):
                    return cls("RATE_X_HOURS:This is used for apply the rate against hours and will need a calculationBaseId to specify what to apply against.")
            calculationBaseId = schemas.StrSchema
            value = schemas.NumberSchema
            startDate = schemas.DateTimeSchema
            effectiveDate = schemas.DateTimeSchema
            endDate = schemas.DateTimeSchema
            effectOnPay = schemas.StrSchema
            classificationType = schemas.StrSchema
        
            @staticmethod
            def frequency() -> typing.Type['PayComponentFrequencyTypeResource1']:
                return PayComponentFrequencyTypeResource1
            
            
            class links(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Link']:
                        return Link
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Link'], typing.List['Link']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'links':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Link':
                    return super().__getitem__(i)
            __annotations__ = {
                "workerComponentId": workerComponentId,
                "componentId": componentId,
                "name": name,
                "calculationType": calculationType,
                "calculationBaseId": calculationBaseId,
                "value": value,
                "startDate": startDate,
                "effectiveDate": effectiveDate,
                "endDate": endDate,
                "effectOnPay": effectOnPay,
                "classificationType": classificationType,
                "frequency": frequency,
                "links": links,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workerComponentId"]) -> MetaOapg.properties.workerComponentId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["componentId"]) -> MetaOapg.properties.componentId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["calculationType"]) -> MetaOapg.properties.calculationType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["calculationBaseId"]) -> MetaOapg.properties.calculationBaseId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["effectiveDate"]) -> MetaOapg.properties.effectiveDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endDate"]) -> MetaOapg.properties.endDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["effectOnPay"]) -> MetaOapg.properties.effectOnPay: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["classificationType"]) -> MetaOapg.properties.classificationType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["frequency"]) -> 'PayComponentFrequencyTypeResource1': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["links"]) -> MetaOapg.properties.links: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["workerComponentId", "componentId", "name", "calculationType", "calculationBaseId", "value", "startDate", "effectiveDate", "endDate", "effectOnPay", "classificationType", "frequency", "links", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workerComponentId"]) -> typing.Union[MetaOapg.properties.workerComponentId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["componentId"]) -> typing.Union[MetaOapg.properties.componentId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["calculationType"]) -> typing.Union[MetaOapg.properties.calculationType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["calculationBaseId"]) -> typing.Union[MetaOapg.properties.calculationBaseId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> typing.Union[MetaOapg.properties.value, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startDate"]) -> typing.Union[MetaOapg.properties.startDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["effectiveDate"]) -> typing.Union[MetaOapg.properties.effectiveDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endDate"]) -> typing.Union[MetaOapg.properties.endDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["effectOnPay"]) -> typing.Union[MetaOapg.properties.effectOnPay, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["classificationType"]) -> typing.Union[MetaOapg.properties.classificationType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["frequency"]) -> typing.Union['PayComponentFrequencyTypeResource1', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["links"]) -> typing.Union[MetaOapg.properties.links, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["workerComponentId", "componentId", "name", "calculationType", "calculationBaseId", "value", "startDate", "effectiveDate", "endDate", "effectOnPay", "classificationType", "frequency", "links", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        workerComponentId: typing.Union[MetaOapg.properties.workerComponentId, str, schemas.Unset] = schemas.unset,
        componentId: typing.Union[MetaOapg.properties.componentId, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        calculationType: typing.Union[MetaOapg.properties.calculationType, str, schemas.Unset] = schemas.unset,
        calculationBaseId: typing.Union[MetaOapg.properties.calculationBaseId, str, schemas.Unset] = schemas.unset,
        value: typing.Union[MetaOapg.properties.value, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        startDate: typing.Union[MetaOapg.properties.startDate, str, datetime, schemas.Unset] = schemas.unset,
        effectiveDate: typing.Union[MetaOapg.properties.effectiveDate, str, datetime, schemas.Unset] = schemas.unset,
        endDate: typing.Union[MetaOapg.properties.endDate, str, datetime, schemas.Unset] = schemas.unset,
        effectOnPay: typing.Union[MetaOapg.properties.effectOnPay, str, schemas.Unset] = schemas.unset,
        classificationType: typing.Union[MetaOapg.properties.classificationType, str, schemas.Unset] = schemas.unset,
        frequency: typing.Union['PayComponentFrequencyTypeResource1', schemas.Unset] = schemas.unset,
        links: typing.Union[MetaOapg.properties.links, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RecurringResource':
        return super().__new__(
            cls,
            *args,
            workerComponentId=workerComponentId,
            componentId=componentId,
            name=name,
            calculationType=calculationType,
            calculationBaseId=calculationBaseId,
            value=value,
            startDate=startDate,
            effectiveDate=effectiveDate,
            endDate=endDate,
            effectOnPay=effectOnPay,
            classificationType=classificationType,
            frequency=frequency,
            links=links,
            _configuration=_configuration,
            **kwargs,
        )

from paychex_python_sdk.model.link import Link
from paychex_python_sdk.model.pay_component_frequency_type_resource1 import PayComponentFrequencyTypeResource1
