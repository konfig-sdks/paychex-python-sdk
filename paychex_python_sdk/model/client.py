# coding: utf-8

"""
    External API

      # Developer Resources  Refer [Developer Resources](https://developer.paychex.com/resources/overview/) for more details on API specification 

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from paychex_python_sdk import schemas  # noqa: F401


class Client(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            lockVersion = schemas.Int64Schema
            createdByApplicationName = schemas.StrSchema
            createdByUserId = schemas.StrSchema
            createdDate = schemas.DateTimeSchema
            createdByApplicationSubProcessName = schemas.StrSchema
            
            
            class clientAccountRelations(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ClientAccountRelation']:
                        return ClientAccountRelation
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ClientAccountRelation'], typing.List['ClientAccountRelation']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'clientAccountRelations':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ClientAccountRelation':
                    return super().__getitem__(i)
            
            
            class clientAddresses(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ClientAddress']:
                        return ClientAddress
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ClientAddress'], typing.List['ClientAddress']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'clientAddresses':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ClientAddress':
                    return super().__getitem__(i)
            
            
            class clientNames(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ClientName']:
                        return ClientName
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ClientName'], typing.List['ClientName']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'clientNames':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ClientName':
                    return super().__getitem__(i)
            
            
            class clientVersions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ClientVersion']:
                        return ClientVersion
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ClientVersion'], typing.List['ClientVersion']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'clientVersions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ClientVersion':
                    return super().__getitem__(i)
            ceid = schemas.StrSchema
            __annotations__ = {
                "lockVersion": lockVersion,
                "createdByApplicationName": createdByApplicationName,
                "createdByUserId": createdByUserId,
                "createdDate": createdDate,
                "createdByApplicationSubProcessName": createdByApplicationSubProcessName,
                "clientAccountRelations": clientAccountRelations,
                "clientAddresses": clientAddresses,
                "clientNames": clientNames,
                "clientVersions": clientVersions,
                "ceid": ceid,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lockVersion"]) -> MetaOapg.properties.lockVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdByApplicationName"]) -> MetaOapg.properties.createdByApplicationName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdByUserId"]) -> MetaOapg.properties.createdByUserId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdDate"]) -> MetaOapg.properties.createdDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdByApplicationSubProcessName"]) -> MetaOapg.properties.createdByApplicationSubProcessName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clientAccountRelations"]) -> MetaOapg.properties.clientAccountRelations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clientAddresses"]) -> MetaOapg.properties.clientAddresses: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clientNames"]) -> MetaOapg.properties.clientNames: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clientVersions"]) -> MetaOapg.properties.clientVersions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ceid"]) -> MetaOapg.properties.ceid: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["lockVersion", "createdByApplicationName", "createdByUserId", "createdDate", "createdByApplicationSubProcessName", "clientAccountRelations", "clientAddresses", "clientNames", "clientVersions", "ceid", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lockVersion"]) -> typing.Union[MetaOapg.properties.lockVersion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdByApplicationName"]) -> typing.Union[MetaOapg.properties.createdByApplicationName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdByUserId"]) -> typing.Union[MetaOapg.properties.createdByUserId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdDate"]) -> typing.Union[MetaOapg.properties.createdDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdByApplicationSubProcessName"]) -> typing.Union[MetaOapg.properties.createdByApplicationSubProcessName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clientAccountRelations"]) -> typing.Union[MetaOapg.properties.clientAccountRelations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clientAddresses"]) -> typing.Union[MetaOapg.properties.clientAddresses, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clientNames"]) -> typing.Union[MetaOapg.properties.clientNames, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clientVersions"]) -> typing.Union[MetaOapg.properties.clientVersions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ceid"]) -> typing.Union[MetaOapg.properties.ceid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["lockVersion", "createdByApplicationName", "createdByUserId", "createdDate", "createdByApplicationSubProcessName", "clientAccountRelations", "clientAddresses", "clientNames", "clientVersions", "ceid", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        lockVersion: typing.Union[MetaOapg.properties.lockVersion, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        createdByApplicationName: typing.Union[MetaOapg.properties.createdByApplicationName, str, schemas.Unset] = schemas.unset,
        createdByUserId: typing.Union[MetaOapg.properties.createdByUserId, str, schemas.Unset] = schemas.unset,
        createdDate: typing.Union[MetaOapg.properties.createdDate, str, datetime, schemas.Unset] = schemas.unset,
        createdByApplicationSubProcessName: typing.Union[MetaOapg.properties.createdByApplicationSubProcessName, str, schemas.Unset] = schemas.unset,
        clientAccountRelations: typing.Union[MetaOapg.properties.clientAccountRelations, list, tuple, schemas.Unset] = schemas.unset,
        clientAddresses: typing.Union[MetaOapg.properties.clientAddresses, list, tuple, schemas.Unset] = schemas.unset,
        clientNames: typing.Union[MetaOapg.properties.clientNames, list, tuple, schemas.Unset] = schemas.unset,
        clientVersions: typing.Union[MetaOapg.properties.clientVersions, list, tuple, schemas.Unset] = schemas.unset,
        ceid: typing.Union[MetaOapg.properties.ceid, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Client':
        return super().__new__(
            cls,
            *args,
            lockVersion=lockVersion,
            createdByApplicationName=createdByApplicationName,
            createdByUserId=createdByUserId,
            createdDate=createdDate,
            createdByApplicationSubProcessName=createdByApplicationSubProcessName,
            clientAccountRelations=clientAccountRelations,
            clientAddresses=clientAddresses,
            clientNames=clientNames,
            clientVersions=clientVersions,
            ceid=ceid,
            _configuration=_configuration,
            **kwargs,
        )

from paychex_python_sdk.model.client_account_relation import ClientAccountRelation
from paychex_python_sdk.model.client_address import ClientAddress
from paychex_python_sdk.model.client_name import ClientName
from paychex_python_sdk.model.client_version import ClientVersion
