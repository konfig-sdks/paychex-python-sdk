# coding: utf-8

"""
    External API

      # Developer Resources  Refer [Developer Resources](https://developer.paychex.com/resources/overview/) for more details on API specification 

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from paychex_python_sdk import schemas  # noqa: F401


class NameResource1(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Information about the workers name.
    """


    class MetaOapg:
        
        class properties:
            familyName = schemas.StrSchema
            middleName = schemas.StrSchema
            givenName = schemas.StrSchema
            preferredName = schemas.StrSchema
            qualificationAffixCode = schemas.StrSchema
            titleAffixCode = schemas.StrSchema
            __annotations__ = {
                "familyName": familyName,
                "middleName": middleName,
                "givenName": givenName,
                "preferredName": preferredName,
                "qualificationAffixCode": qualificationAffixCode,
                "titleAffixCode": titleAffixCode,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["familyName"]) -> MetaOapg.properties.familyName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["middleName"]) -> MetaOapg.properties.middleName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["givenName"]) -> MetaOapg.properties.givenName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preferredName"]) -> MetaOapg.properties.preferredName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qualificationAffixCode"]) -> MetaOapg.properties.qualificationAffixCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["titleAffixCode"]) -> MetaOapg.properties.titleAffixCode: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["familyName", "middleName", "givenName", "preferredName", "qualificationAffixCode", "titleAffixCode", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["familyName"]) -> typing.Union[MetaOapg.properties.familyName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["middleName"]) -> typing.Union[MetaOapg.properties.middleName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["givenName"]) -> typing.Union[MetaOapg.properties.givenName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preferredName"]) -> typing.Union[MetaOapg.properties.preferredName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qualificationAffixCode"]) -> typing.Union[MetaOapg.properties.qualificationAffixCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["titleAffixCode"]) -> typing.Union[MetaOapg.properties.titleAffixCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["familyName", "middleName", "givenName", "preferredName", "qualificationAffixCode", "titleAffixCode", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        familyName: typing.Union[MetaOapg.properties.familyName, str, schemas.Unset] = schemas.unset,
        middleName: typing.Union[MetaOapg.properties.middleName, str, schemas.Unset] = schemas.unset,
        givenName: typing.Union[MetaOapg.properties.givenName, str, schemas.Unset] = schemas.unset,
        preferredName: typing.Union[MetaOapg.properties.preferredName, str, schemas.Unset] = schemas.unset,
        qualificationAffixCode: typing.Union[MetaOapg.properties.qualificationAffixCode, str, schemas.Unset] = schemas.unset,
        titleAffixCode: typing.Union[MetaOapg.properties.titleAffixCode, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NameResource1':
        return super().__new__(
            cls,
            *args,
            familyName=familyName,
            middleName=middleName,
            givenName=givenName,
            preferredName=preferredName,
            qualificationAffixCode=qualificationAffixCode,
            titleAffixCode=titleAffixCode,
            _configuration=_configuration,
            **kwargs,
        )
