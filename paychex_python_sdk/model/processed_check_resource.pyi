# coding: utf-8

"""
    External API

      # Developer Resources  Refer [Developer Resources](https://developer.paychex.com/resources/overview/) for more details on API specification 

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from paychex_python_sdk import schemas  # noqa: F401


class ProcessedCheckResource(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            payPeriodId = schemas.StrSchema
            paycheckId = schemas.StrSchema
            workerId = schemas.StrSchema
            checkDate = schemas.DateTimeSchema
            netPay = schemas.StrSchema
            checkType = schemas.StrSchema
            checkNumber = schemas.StrSchema
            
            
            class earnings(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ProcessedCheckComponentResource']:
                        return ProcessedCheckComponentResource
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ProcessedCheckComponentResource'], typing.List['ProcessedCheckComponentResource']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'earnings':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ProcessedCheckComponentResource':
                    return super().__getitem__(i)
            
            
            class deductions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ProcessedCheckComponentResource']:
                        return ProcessedCheckComponentResource
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ProcessedCheckComponentResource'], typing.List['ProcessedCheckComponentResource']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'deductions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ProcessedCheckComponentResource':
                    return super().__getitem__(i)
            
            
            class informational(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ProcessedCheckComponentResource']:
                        return ProcessedCheckComponentResource
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ProcessedCheckComponentResource'], typing.List['ProcessedCheckComponentResource']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'informational':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ProcessedCheckComponentResource':
                    return super().__getitem__(i)
            
            
            class taxes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ProcessedCheckComponentResource']:
                        return ProcessedCheckComponentResource
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ProcessedCheckComponentResource'], typing.List['ProcessedCheckComponentResource']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'taxes':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ProcessedCheckComponentResource':
                    return super().__getitem__(i)
            grossEarnings = schemas.StrSchema
            
            
            class links(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Link']:
                        return Link
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Link'], typing.List['Link']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'links':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Link':
                    return super().__getitem__(i)
            __annotations__ = {
                "payPeriodId": payPeriodId,
                "paycheckId": paycheckId,
                "workerId": workerId,
                "checkDate": checkDate,
                "netPay": netPay,
                "checkType": checkType,
                "checkNumber": checkNumber,
                "earnings": earnings,
                "deductions": deductions,
                "informational": informational,
                "taxes": taxes,
                "grossEarnings": grossEarnings,
                "links": links,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payPeriodId"]) -> MetaOapg.properties.payPeriodId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paycheckId"]) -> MetaOapg.properties.paycheckId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workerId"]) -> MetaOapg.properties.workerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["checkDate"]) -> MetaOapg.properties.checkDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["netPay"]) -> MetaOapg.properties.netPay: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["checkType"]) -> MetaOapg.properties.checkType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["checkNumber"]) -> MetaOapg.properties.checkNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["earnings"]) -> MetaOapg.properties.earnings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductions"]) -> MetaOapg.properties.deductions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["informational"]) -> MetaOapg.properties.informational: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxes"]) -> MetaOapg.properties.taxes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grossEarnings"]) -> MetaOapg.properties.grossEarnings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["links"]) -> MetaOapg.properties.links: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["payPeriodId", "paycheckId", "workerId", "checkDate", "netPay", "checkType", "checkNumber", "earnings", "deductions", "informational", "taxes", "grossEarnings", "links", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payPeriodId"]) -> typing.Union[MetaOapg.properties.payPeriodId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paycheckId"]) -> typing.Union[MetaOapg.properties.paycheckId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workerId"]) -> typing.Union[MetaOapg.properties.workerId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["checkDate"]) -> typing.Union[MetaOapg.properties.checkDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["netPay"]) -> typing.Union[MetaOapg.properties.netPay, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["checkType"]) -> typing.Union[MetaOapg.properties.checkType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["checkNumber"]) -> typing.Union[MetaOapg.properties.checkNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["earnings"]) -> typing.Union[MetaOapg.properties.earnings, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductions"]) -> typing.Union[MetaOapg.properties.deductions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["informational"]) -> typing.Union[MetaOapg.properties.informational, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxes"]) -> typing.Union[MetaOapg.properties.taxes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grossEarnings"]) -> typing.Union[MetaOapg.properties.grossEarnings, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["links"]) -> typing.Union[MetaOapg.properties.links, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["payPeriodId", "paycheckId", "workerId", "checkDate", "netPay", "checkType", "checkNumber", "earnings", "deductions", "informational", "taxes", "grossEarnings", "links", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        payPeriodId: typing.Union[MetaOapg.properties.payPeriodId, str, schemas.Unset] = schemas.unset,
        paycheckId: typing.Union[MetaOapg.properties.paycheckId, str, schemas.Unset] = schemas.unset,
        workerId: typing.Union[MetaOapg.properties.workerId, str, schemas.Unset] = schemas.unset,
        checkDate: typing.Union[MetaOapg.properties.checkDate, str, datetime, schemas.Unset] = schemas.unset,
        netPay: typing.Union[MetaOapg.properties.netPay, str, schemas.Unset] = schemas.unset,
        checkType: typing.Union[MetaOapg.properties.checkType, str, schemas.Unset] = schemas.unset,
        checkNumber: typing.Union[MetaOapg.properties.checkNumber, str, schemas.Unset] = schemas.unset,
        earnings: typing.Union[MetaOapg.properties.earnings, list, tuple, schemas.Unset] = schemas.unset,
        deductions: typing.Union[MetaOapg.properties.deductions, list, tuple, schemas.Unset] = schemas.unset,
        informational: typing.Union[MetaOapg.properties.informational, list, tuple, schemas.Unset] = schemas.unset,
        taxes: typing.Union[MetaOapg.properties.taxes, list, tuple, schemas.Unset] = schemas.unset,
        grossEarnings: typing.Union[MetaOapg.properties.grossEarnings, str, schemas.Unset] = schemas.unset,
        links: typing.Union[MetaOapg.properties.links, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProcessedCheckResource':
        return super().__new__(
            cls,
            *args,
            payPeriodId=payPeriodId,
            paycheckId=paycheckId,
            workerId=workerId,
            checkDate=checkDate,
            netPay=netPay,
            checkType=checkType,
            checkNumber=checkNumber,
            earnings=earnings,
            deductions=deductions,
            informational=informational,
            taxes=taxes,
            grossEarnings=grossEarnings,
            links=links,
            _configuration=_configuration,
            **kwargs,
        )

from paychex_python_sdk.model.link import Link
from paychex_python_sdk.model.processed_check_component_resource import ProcessedCheckComponentResource
