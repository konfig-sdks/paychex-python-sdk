# coding: utf-8

"""
    External API

      # Developer Resources  Refer [Developer Resources](https://developer.paychex.com/resources/overview/) for more details on API specification 

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from paychex_python_sdk import schemas  # noqa: F401


class ClientAddressVersion(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            id = schemas.Int64Schema
            city = schemas.StrSchema
            valStateCode = schemas.StrSchema
            verStateCode = schemas.StrSchema
            beginEffectiveDate = schemas.DateTimeSchema
            endEffectiveDate = schemas.DateTimeSchema
            modifiedDate = schemas.DateTimeSchema
            stateProvince = schemas.StrSchema
            stateProvinceF = schemas.StrSchema
            portalCode = schemas.StrSchema
            countryCode = schemas.StrSchema
            buildingNumber = schemas.StrSchema
            unitName = schemas.StrSchema
            streetName = schemas.StrSchema
            poBox = schemas.StrSchema
            streetAddressOne = schemas.StrSchema
            streetAddressTwo = schemas.StrSchema
            modifedByApplicationName = schemas.StrSchema
            modifiedByApplicationSubProcessName = schemas.StrSchema
            modifiedByUserId = schemas.StrSchema
        
            @staticmethod
            def clientAddress() -> typing.Type['ClientAddress']:
                return ClientAddress
            __annotations__ = {
                "id": id,
                "city": city,
                "valStateCode": valStateCode,
                "verStateCode": verStateCode,
                "beginEffectiveDate": beginEffectiveDate,
                "endEffectiveDate": endEffectiveDate,
                "modifiedDate": modifiedDate,
                "stateProvince": stateProvince,
                "stateProvinceF": stateProvinceF,
                "portalCode": portalCode,
                "countryCode": countryCode,
                "buildingNumber": buildingNumber,
                "unitName": unitName,
                "streetName": streetName,
                "poBox": poBox,
                "streetAddressOne": streetAddressOne,
                "streetAddressTwo": streetAddressTwo,
                "modifedByApplicationName": modifedByApplicationName,
                "modifiedByApplicationSubProcessName": modifiedByApplicationSubProcessName,
                "modifiedByUserId": modifiedByUserId,
                "clientAddress": clientAddress,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["valStateCode"]) -> MetaOapg.properties.valStateCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verStateCode"]) -> MetaOapg.properties.verStateCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beginEffectiveDate"]) -> MetaOapg.properties.beginEffectiveDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endEffectiveDate"]) -> MetaOapg.properties.endEffectiveDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modifiedDate"]) -> MetaOapg.properties.modifiedDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stateProvince"]) -> MetaOapg.properties.stateProvince: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stateProvinceF"]) -> MetaOapg.properties.stateProvinceF: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["portalCode"]) -> MetaOapg.properties.portalCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["countryCode"]) -> MetaOapg.properties.countryCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buildingNumber"]) -> MetaOapg.properties.buildingNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unitName"]) -> MetaOapg.properties.unitName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["streetName"]) -> MetaOapg.properties.streetName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["poBox"]) -> MetaOapg.properties.poBox: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["streetAddressOne"]) -> MetaOapg.properties.streetAddressOne: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["streetAddressTwo"]) -> MetaOapg.properties.streetAddressTwo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modifedByApplicationName"]) -> MetaOapg.properties.modifedByApplicationName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modifiedByApplicationSubProcessName"]) -> MetaOapg.properties.modifiedByApplicationSubProcessName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modifiedByUserId"]) -> MetaOapg.properties.modifiedByUserId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clientAddress"]) -> 'ClientAddress': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "city", "valStateCode", "verStateCode", "beginEffectiveDate", "endEffectiveDate", "modifiedDate", "stateProvince", "stateProvinceF", "portalCode", "countryCode", "buildingNumber", "unitName", "streetName", "poBox", "streetAddressOne", "streetAddressTwo", "modifedByApplicationName", "modifiedByApplicationSubProcessName", "modifiedByUserId", "clientAddress", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> typing.Union[MetaOapg.properties.city, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["valStateCode"]) -> typing.Union[MetaOapg.properties.valStateCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verStateCode"]) -> typing.Union[MetaOapg.properties.verStateCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beginEffectiveDate"]) -> typing.Union[MetaOapg.properties.beginEffectiveDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endEffectiveDate"]) -> typing.Union[MetaOapg.properties.endEffectiveDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modifiedDate"]) -> typing.Union[MetaOapg.properties.modifiedDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stateProvince"]) -> typing.Union[MetaOapg.properties.stateProvince, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stateProvinceF"]) -> typing.Union[MetaOapg.properties.stateProvinceF, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["portalCode"]) -> typing.Union[MetaOapg.properties.portalCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["countryCode"]) -> typing.Union[MetaOapg.properties.countryCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buildingNumber"]) -> typing.Union[MetaOapg.properties.buildingNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unitName"]) -> typing.Union[MetaOapg.properties.unitName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["streetName"]) -> typing.Union[MetaOapg.properties.streetName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["poBox"]) -> typing.Union[MetaOapg.properties.poBox, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["streetAddressOne"]) -> typing.Union[MetaOapg.properties.streetAddressOne, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["streetAddressTwo"]) -> typing.Union[MetaOapg.properties.streetAddressTwo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modifedByApplicationName"]) -> typing.Union[MetaOapg.properties.modifedByApplicationName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modifiedByApplicationSubProcessName"]) -> typing.Union[MetaOapg.properties.modifiedByApplicationSubProcessName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modifiedByUserId"]) -> typing.Union[MetaOapg.properties.modifiedByUserId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clientAddress"]) -> typing.Union['ClientAddress', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "city", "valStateCode", "verStateCode", "beginEffectiveDate", "endEffectiveDate", "modifiedDate", "stateProvince", "stateProvinceF", "portalCode", "countryCode", "buildingNumber", "unitName", "streetName", "poBox", "streetAddressOne", "streetAddressTwo", "modifedByApplicationName", "modifiedByApplicationSubProcessName", "modifiedByUserId", "clientAddress", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        city: typing.Union[MetaOapg.properties.city, str, schemas.Unset] = schemas.unset,
        valStateCode: typing.Union[MetaOapg.properties.valStateCode, str, schemas.Unset] = schemas.unset,
        verStateCode: typing.Union[MetaOapg.properties.verStateCode, str, schemas.Unset] = schemas.unset,
        beginEffectiveDate: typing.Union[MetaOapg.properties.beginEffectiveDate, str, datetime, schemas.Unset] = schemas.unset,
        endEffectiveDate: typing.Union[MetaOapg.properties.endEffectiveDate, str, datetime, schemas.Unset] = schemas.unset,
        modifiedDate: typing.Union[MetaOapg.properties.modifiedDate, str, datetime, schemas.Unset] = schemas.unset,
        stateProvince: typing.Union[MetaOapg.properties.stateProvince, str, schemas.Unset] = schemas.unset,
        stateProvinceF: typing.Union[MetaOapg.properties.stateProvinceF, str, schemas.Unset] = schemas.unset,
        portalCode: typing.Union[MetaOapg.properties.portalCode, str, schemas.Unset] = schemas.unset,
        countryCode: typing.Union[MetaOapg.properties.countryCode, str, schemas.Unset] = schemas.unset,
        buildingNumber: typing.Union[MetaOapg.properties.buildingNumber, str, schemas.Unset] = schemas.unset,
        unitName: typing.Union[MetaOapg.properties.unitName, str, schemas.Unset] = schemas.unset,
        streetName: typing.Union[MetaOapg.properties.streetName, str, schemas.Unset] = schemas.unset,
        poBox: typing.Union[MetaOapg.properties.poBox, str, schemas.Unset] = schemas.unset,
        streetAddressOne: typing.Union[MetaOapg.properties.streetAddressOne, str, schemas.Unset] = schemas.unset,
        streetAddressTwo: typing.Union[MetaOapg.properties.streetAddressTwo, str, schemas.Unset] = schemas.unset,
        modifedByApplicationName: typing.Union[MetaOapg.properties.modifedByApplicationName, str, schemas.Unset] = schemas.unset,
        modifiedByApplicationSubProcessName: typing.Union[MetaOapg.properties.modifiedByApplicationSubProcessName, str, schemas.Unset] = schemas.unset,
        modifiedByUserId: typing.Union[MetaOapg.properties.modifiedByUserId, str, schemas.Unset] = schemas.unset,
        clientAddress: typing.Union['ClientAddress', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ClientAddressVersion':
        return super().__new__(
            cls,
            *args,
            id=id,
            city=city,
            valStateCode=valStateCode,
            verStateCode=verStateCode,
            beginEffectiveDate=beginEffectiveDate,
            endEffectiveDate=endEffectiveDate,
            modifiedDate=modifiedDate,
            stateProvince=stateProvince,
            stateProvinceF=stateProvinceF,
            portalCode=portalCode,
            countryCode=countryCode,
            buildingNumber=buildingNumber,
            unitName=unitName,
            streetName=streetName,
            poBox=poBox,
            streetAddressOne=streetAddressOne,
            streetAddressTwo=streetAddressTwo,
            modifedByApplicationName=modifedByApplicationName,
            modifiedByApplicationSubProcessName=modifiedByApplicationSubProcessName,
            modifiedByUserId=modifiedByUserId,
            clientAddress=clientAddress,
            _configuration=_configuration,
            **kwargs,
        )

from paychex_python_sdk.model.client_address import ClientAddress
