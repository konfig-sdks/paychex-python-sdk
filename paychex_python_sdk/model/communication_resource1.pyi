# coding: utf-8

"""
    External API

      # Developer Resources  Refer [Developer Resources](https://developer.paychex.com/resources/overview/) for more details on API specification 

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from paychex_python_sdk import schemas  # noqa: F401


class CommunicationResource1(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            communicationId = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def STREET_ADDRESS(cls):
                    return cls("STREET_ADDRESS")
                
                @schemas.classproperty
                def PO_BOX_ADDRESS(cls):
                    return cls("PO_BOX_ADDRESS")
                
                @schemas.classproperty
                def PHONE(cls):
                    return cls("PHONE")
                
                @schemas.classproperty
                def MOBILE_PHONE(cls):
                    return cls("MOBILE_PHONE")
                
                @schemas.classproperty
                def FAX(cls):
                    return cls("FAX")
                
                @schemas.classproperty
                def EMAIL(cls):
                    return cls("EMAIL")
                
                @schemas.classproperty
                def PAGER(cls):
                    return cls("PAGER")
            
            
            class usageType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def PERSONAL(cls):
                    return cls("PERSONAL")
                
                @schemas.classproperty
                def BUSINESS(cls):
                    return cls("BUSINESS")
                
                @schemas.classproperty
                def HOME(cls):
                    return cls("HOME")
                
                @schemas.classproperty
                def WORK(cls):
                    return cls("WORK")
                
                @schemas.classproperty
                def LOCATION_STREET_ADDRESS(cls):
                    return cls("LOCATION_STREET_ADDRESS")
                
                @schemas.classproperty
                def MAILING_ADDRESS(cls):
                    return cls("MAILING_ADDRESS")
            dialCountry = schemas.StrSchema
            dialArea = schemas.StrSchema
            dialNumber = schemas.StrSchema
            dialExtension = schemas.StrSchema
            uri = schemas.StrSchema
            streetLineOne = schemas.StrSchema
            streetLineTwo = schemas.StrSchema
            postOfficeBox = schemas.StrSchema
            city = schemas.StrSchema
            postalCode = schemas.StrSchema
            postalCodeExtension = schemas.StrSchema
            countrySubdivisionCode = schemas.StrSchema
            countryCode = schemas.StrSchema
            
            
            class links(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Link']:
                        return Link
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Link'], typing.List['Link']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'links':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Link':
                    return super().__getitem__(i)
            __annotations__ = {
                "communicationId": communicationId,
                "type": type,
                "usageType": usageType,
                "dialCountry": dialCountry,
                "dialArea": dialArea,
                "dialNumber": dialNumber,
                "dialExtension": dialExtension,
                "uri": uri,
                "streetLineOne": streetLineOne,
                "streetLineTwo": streetLineTwo,
                "postOfficeBox": postOfficeBox,
                "city": city,
                "postalCode": postalCode,
                "postalCodeExtension": postalCodeExtension,
                "countrySubdivisionCode": countrySubdivisionCode,
                "countryCode": countryCode,
                "links": links,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["communicationId"]) -> MetaOapg.properties.communicationId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usageType"]) -> MetaOapg.properties.usageType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dialCountry"]) -> MetaOapg.properties.dialCountry: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dialArea"]) -> MetaOapg.properties.dialArea: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dialNumber"]) -> MetaOapg.properties.dialNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dialExtension"]) -> MetaOapg.properties.dialExtension: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["streetLineOne"]) -> MetaOapg.properties.streetLineOne: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["streetLineTwo"]) -> MetaOapg.properties.streetLineTwo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postOfficeBox"]) -> MetaOapg.properties.postOfficeBox: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postalCode"]) -> MetaOapg.properties.postalCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postalCodeExtension"]) -> MetaOapg.properties.postalCodeExtension: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["countrySubdivisionCode"]) -> MetaOapg.properties.countrySubdivisionCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["countryCode"]) -> MetaOapg.properties.countryCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["links"]) -> MetaOapg.properties.links: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["communicationId", "type", "usageType", "dialCountry", "dialArea", "dialNumber", "dialExtension", "uri", "streetLineOne", "streetLineTwo", "postOfficeBox", "city", "postalCode", "postalCodeExtension", "countrySubdivisionCode", "countryCode", "links", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["communicationId"]) -> typing.Union[MetaOapg.properties.communicationId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usageType"]) -> typing.Union[MetaOapg.properties.usageType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dialCountry"]) -> typing.Union[MetaOapg.properties.dialCountry, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dialArea"]) -> typing.Union[MetaOapg.properties.dialArea, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dialNumber"]) -> typing.Union[MetaOapg.properties.dialNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dialExtension"]) -> typing.Union[MetaOapg.properties.dialExtension, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uri"]) -> typing.Union[MetaOapg.properties.uri, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["streetLineOne"]) -> typing.Union[MetaOapg.properties.streetLineOne, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["streetLineTwo"]) -> typing.Union[MetaOapg.properties.streetLineTwo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postOfficeBox"]) -> typing.Union[MetaOapg.properties.postOfficeBox, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> typing.Union[MetaOapg.properties.city, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postalCode"]) -> typing.Union[MetaOapg.properties.postalCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postalCodeExtension"]) -> typing.Union[MetaOapg.properties.postalCodeExtension, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["countrySubdivisionCode"]) -> typing.Union[MetaOapg.properties.countrySubdivisionCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["countryCode"]) -> typing.Union[MetaOapg.properties.countryCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["links"]) -> typing.Union[MetaOapg.properties.links, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["communicationId", "type", "usageType", "dialCountry", "dialArea", "dialNumber", "dialExtension", "uri", "streetLineOne", "streetLineTwo", "postOfficeBox", "city", "postalCode", "postalCodeExtension", "countrySubdivisionCode", "countryCode", "links", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        communicationId: typing.Union[MetaOapg.properties.communicationId, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        usageType: typing.Union[MetaOapg.properties.usageType, str, schemas.Unset] = schemas.unset,
        dialCountry: typing.Union[MetaOapg.properties.dialCountry, str, schemas.Unset] = schemas.unset,
        dialArea: typing.Union[MetaOapg.properties.dialArea, str, schemas.Unset] = schemas.unset,
        dialNumber: typing.Union[MetaOapg.properties.dialNumber, str, schemas.Unset] = schemas.unset,
        dialExtension: typing.Union[MetaOapg.properties.dialExtension, str, schemas.Unset] = schemas.unset,
        uri: typing.Union[MetaOapg.properties.uri, str, schemas.Unset] = schemas.unset,
        streetLineOne: typing.Union[MetaOapg.properties.streetLineOne, str, schemas.Unset] = schemas.unset,
        streetLineTwo: typing.Union[MetaOapg.properties.streetLineTwo, str, schemas.Unset] = schemas.unset,
        postOfficeBox: typing.Union[MetaOapg.properties.postOfficeBox, str, schemas.Unset] = schemas.unset,
        city: typing.Union[MetaOapg.properties.city, str, schemas.Unset] = schemas.unset,
        postalCode: typing.Union[MetaOapg.properties.postalCode, str, schemas.Unset] = schemas.unset,
        postalCodeExtension: typing.Union[MetaOapg.properties.postalCodeExtension, str, schemas.Unset] = schemas.unset,
        countrySubdivisionCode: typing.Union[MetaOapg.properties.countrySubdivisionCode, str, schemas.Unset] = schemas.unset,
        countryCode: typing.Union[MetaOapg.properties.countryCode, str, schemas.Unset] = schemas.unset,
        links: typing.Union[MetaOapg.properties.links, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CommunicationResource1':
        return super().__new__(
            cls,
            *args,
            communicationId=communicationId,
            type=type,
            usageType=usageType,
            dialCountry=dialCountry,
            dialArea=dialArea,
            dialNumber=dialNumber,
            dialExtension=dialExtension,
            uri=uri,
            streetLineOne=streetLineOne,
            streetLineTwo=streetLineTwo,
            postOfficeBox=postOfficeBox,
            city=city,
            postalCode=postalCode,
            postalCodeExtension=postalCodeExtension,
            countrySubdivisionCode=countrySubdivisionCode,
            countryCode=countryCode,
            links=links,
            _configuration=_configuration,
            **kwargs,
        )

from paychex_python_sdk.model.link import Link
