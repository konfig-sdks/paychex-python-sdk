# coding: utf-8

"""
    External API

      # Developer Resources  Refer [Developer Resources](https://developer.paychex.com/resources/overview/) for more details on API specification 

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from paychex_python_sdk import schemas  # noqa: F401


class WorkerFederalTaxResource(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The representational state of the a worker's federal tax setup.
    """


    class MetaOapg:
        
        class properties:
            taxId = schemas.StrSchema
            
            
            class filingStatus(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def SINGLE_OR_MARRIED_FILING_SEPARATELY(cls):
                    return cls("SINGLE_OR_MARRIED_FILING_SEPARATELY")
                
                @schemas.classproperty
                def MARRIED_FILING_JOINTLY(cls):
                    return cls("MARRIED_FILING_JOINTLY")
                
                @schemas.classproperty
                def HEAD_OF_HOUSEHOLD(cls):
                    return cls("HEAD_OF_HOUSEHOLD")
            
            
            class multipleJobs(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def TRUE(cls):
                    return cls("true")
                
                @schemas.classproperty
                def FALSE(cls):
                    return cls("false")
            dependentsAmount = schemas.StrSchema
            
            
            class otherIncome(
                schemas.StrSchema
            ):
                pass
            
            
            class deductionsAmount(
                schemas.StrSchema
            ):
                pass
            
            
            class extraWithholdingAmount(
                schemas.StrSchema
            ):
                pass
            
            
            class taxesWithheld(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def TRUE__FEDERAL_TAXES_WITHHELD(cls):
                    return cls("true = Federal taxes withheld")
                
                @schemas.classproperty
                def FALSE__FEDERAL_TAXES_ARE_NOT_WITHHELD__EARNINGS_WILL_BE_REPORTED_TO_STATE_AND_FEDERAL_AGENCIES_(cls):
                    return cls("false = Federal taxes are NOT withheld. Earnings will be reported to state and federal agencies.")
            __annotations__ = {
                "taxId": taxId,
                "filingStatus": filingStatus,
                "multipleJobs": multipleJobs,
                "dependentsAmount": dependentsAmount,
                "otherIncome": otherIncome,
                "deductionsAmount": deductionsAmount,
                "extraWithholdingAmount": extraWithholdingAmount,
                "taxesWithheld": taxesWithheld,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxId"]) -> MetaOapg.properties.taxId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filingStatus"]) -> MetaOapg.properties.filingStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["multipleJobs"]) -> MetaOapg.properties.multipleJobs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dependentsAmount"]) -> MetaOapg.properties.dependentsAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["otherIncome"]) -> MetaOapg.properties.otherIncome: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductionsAmount"]) -> MetaOapg.properties.deductionsAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extraWithholdingAmount"]) -> MetaOapg.properties.extraWithholdingAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxesWithheld"]) -> MetaOapg.properties.taxesWithheld: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["taxId", "filingStatus", "multipleJobs", "dependentsAmount", "otherIncome", "deductionsAmount", "extraWithholdingAmount", "taxesWithheld", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxId"]) -> typing.Union[MetaOapg.properties.taxId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filingStatus"]) -> typing.Union[MetaOapg.properties.filingStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["multipleJobs"]) -> typing.Union[MetaOapg.properties.multipleJobs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dependentsAmount"]) -> typing.Union[MetaOapg.properties.dependentsAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["otherIncome"]) -> typing.Union[MetaOapg.properties.otherIncome, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductionsAmount"]) -> typing.Union[MetaOapg.properties.deductionsAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extraWithholdingAmount"]) -> typing.Union[MetaOapg.properties.extraWithholdingAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxesWithheld"]) -> typing.Union[MetaOapg.properties.taxesWithheld, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["taxId", "filingStatus", "multipleJobs", "dependentsAmount", "otherIncome", "deductionsAmount", "extraWithholdingAmount", "taxesWithheld", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        taxId: typing.Union[MetaOapg.properties.taxId, str, schemas.Unset] = schemas.unset,
        filingStatus: typing.Union[MetaOapg.properties.filingStatus, str, schemas.Unset] = schemas.unset,
        multipleJobs: typing.Union[MetaOapg.properties.multipleJobs, str, schemas.Unset] = schemas.unset,
        dependentsAmount: typing.Union[MetaOapg.properties.dependentsAmount, str, schemas.Unset] = schemas.unset,
        otherIncome: typing.Union[MetaOapg.properties.otherIncome, str, schemas.Unset] = schemas.unset,
        deductionsAmount: typing.Union[MetaOapg.properties.deductionsAmount, str, schemas.Unset] = schemas.unset,
        extraWithholdingAmount: typing.Union[MetaOapg.properties.extraWithholdingAmount, str, schemas.Unset] = schemas.unset,
        taxesWithheld: typing.Union[MetaOapg.properties.taxesWithheld, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WorkerFederalTaxResource':
        return super().__new__(
            cls,
            *args,
            taxId=taxId,
            filingStatus=filingStatus,
            multipleJobs=multipleJobs,
            dependentsAmount=dependentsAmount,
            otherIncome=otherIncome,
            deductionsAmount=deductionsAmount,
            extraWithholdingAmount=extraWithholdingAmount,
            taxesWithheld=taxesWithheld,
            _configuration=_configuration,
            **kwargs,
        )
