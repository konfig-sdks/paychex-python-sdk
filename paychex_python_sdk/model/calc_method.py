# coding: utf-8

"""
    External API

      # Developer Resources  Refer [Developer Resources](https://developer.paychex.com/resources/overview/) for more details on API specification 

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from paychex_python_sdk import schemas  # noqa: F401


class CalcMethod(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            ccmId = schemas.Int64Schema
            defaultTypeId = schemas.Int64Schema
            defaultType = schemas.StrSchema
            calcTypeId = schemas.Int64Schema
            calculationType = schemas.StrSchema
            calcType = schemas.StrSchema
            calcAdjType = schemas.StrSchema
            isIncludeMemoHours = schemas.BoolSchema
            isTieredByPct = schemas.BoolSchema
            isMatchCalcAsPct = schemas.BoolSchema
            calcAdjTypeId = schemas.Int64Schema
            payRateOvrdTypeId = schemas.Int64Schema
            payRateOvrdType = schemas.StrSchema
            __annotations__ = {
                "ccmId": ccmId,
                "defaultTypeId": defaultTypeId,
                "defaultType": defaultType,
                "calcTypeId": calcTypeId,
                "calculationType": calculationType,
                "calcType": calcType,
                "calcAdjType": calcAdjType,
                "isIncludeMemoHours": isIncludeMemoHours,
                "isTieredByPct": isTieredByPct,
                "isMatchCalcAsPct": isMatchCalcAsPct,
                "calcAdjTypeId": calcAdjTypeId,
                "payRateOvrdTypeId": payRateOvrdTypeId,
                "payRateOvrdType": payRateOvrdType,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ccmId"]) -> MetaOapg.properties.ccmId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaultTypeId"]) -> MetaOapg.properties.defaultTypeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaultType"]) -> MetaOapg.properties.defaultType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["calcTypeId"]) -> MetaOapg.properties.calcTypeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["calculationType"]) -> MetaOapg.properties.calculationType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["calcType"]) -> MetaOapg.properties.calcType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["calcAdjType"]) -> MetaOapg.properties.calcAdjType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isIncludeMemoHours"]) -> MetaOapg.properties.isIncludeMemoHours: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isTieredByPct"]) -> MetaOapg.properties.isTieredByPct: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isMatchCalcAsPct"]) -> MetaOapg.properties.isMatchCalcAsPct: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["calcAdjTypeId"]) -> MetaOapg.properties.calcAdjTypeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payRateOvrdTypeId"]) -> MetaOapg.properties.payRateOvrdTypeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payRateOvrdType"]) -> MetaOapg.properties.payRateOvrdType: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ccmId", "defaultTypeId", "defaultType", "calcTypeId", "calculationType", "calcType", "calcAdjType", "isIncludeMemoHours", "isTieredByPct", "isMatchCalcAsPct", "calcAdjTypeId", "payRateOvrdTypeId", "payRateOvrdType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ccmId"]) -> typing.Union[MetaOapg.properties.ccmId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaultTypeId"]) -> typing.Union[MetaOapg.properties.defaultTypeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaultType"]) -> typing.Union[MetaOapg.properties.defaultType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["calcTypeId"]) -> typing.Union[MetaOapg.properties.calcTypeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["calculationType"]) -> typing.Union[MetaOapg.properties.calculationType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["calcType"]) -> typing.Union[MetaOapg.properties.calcType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["calcAdjType"]) -> typing.Union[MetaOapg.properties.calcAdjType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isIncludeMemoHours"]) -> typing.Union[MetaOapg.properties.isIncludeMemoHours, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isTieredByPct"]) -> typing.Union[MetaOapg.properties.isTieredByPct, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isMatchCalcAsPct"]) -> typing.Union[MetaOapg.properties.isMatchCalcAsPct, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["calcAdjTypeId"]) -> typing.Union[MetaOapg.properties.calcAdjTypeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payRateOvrdTypeId"]) -> typing.Union[MetaOapg.properties.payRateOvrdTypeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payRateOvrdType"]) -> typing.Union[MetaOapg.properties.payRateOvrdType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ccmId", "defaultTypeId", "defaultType", "calcTypeId", "calculationType", "calcType", "calcAdjType", "isIncludeMemoHours", "isTieredByPct", "isMatchCalcAsPct", "calcAdjTypeId", "payRateOvrdTypeId", "payRateOvrdType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        ccmId: typing.Union[MetaOapg.properties.ccmId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        defaultTypeId: typing.Union[MetaOapg.properties.defaultTypeId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        defaultType: typing.Union[MetaOapg.properties.defaultType, str, schemas.Unset] = schemas.unset,
        calcTypeId: typing.Union[MetaOapg.properties.calcTypeId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        calculationType: typing.Union[MetaOapg.properties.calculationType, str, schemas.Unset] = schemas.unset,
        calcType: typing.Union[MetaOapg.properties.calcType, str, schemas.Unset] = schemas.unset,
        calcAdjType: typing.Union[MetaOapg.properties.calcAdjType, str, schemas.Unset] = schemas.unset,
        isIncludeMemoHours: typing.Union[MetaOapg.properties.isIncludeMemoHours, bool, schemas.Unset] = schemas.unset,
        isTieredByPct: typing.Union[MetaOapg.properties.isTieredByPct, bool, schemas.Unset] = schemas.unset,
        isMatchCalcAsPct: typing.Union[MetaOapg.properties.isMatchCalcAsPct, bool, schemas.Unset] = schemas.unset,
        calcAdjTypeId: typing.Union[MetaOapg.properties.calcAdjTypeId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        payRateOvrdTypeId: typing.Union[MetaOapg.properties.payRateOvrdTypeId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        payRateOvrdType: typing.Union[MetaOapg.properties.payRateOvrdType, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CalcMethod':
        return super().__new__(
            cls,
            *args,
            ccmId=ccmId,
            defaultTypeId=defaultTypeId,
            defaultType=defaultType,
            calcTypeId=calcTypeId,
            calculationType=calculationType,
            calcType=calcType,
            calcAdjType=calcAdjType,
            isIncludeMemoHours=isIncludeMemoHours,
            isTieredByPct=isTieredByPct,
            isMatchCalcAsPct=isMatchCalcAsPct,
            calcAdjTypeId=calcAdjTypeId,
            payRateOvrdTypeId=payRateOvrdTypeId,
            payRateOvrdType=payRateOvrdType,
            _configuration=_configuration,
            **kwargs,
        )
