# coding: utf-8

"""
    External API

      # Developer Resources  Refer [Developer Resources](https://developer.paychex.com/resources/overview/) for more details on API specification 

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from paychex_python_sdk import schemas  # noqa: F401


class ClientPayComponentResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def payComponent() -> typing.Type['PayComponent']:
                return PayComponent
        
            @staticmethod
            def frequencyData() -> typing.Type['ClientPayComponentFrequency']:
                return ClientPayComponentFrequency
            
            
            class calcMethods(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CalcMethod']:
                        return CalcMethod
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['CalcMethod'], typing.List['CalcMethod']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'calcMethods':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CalcMethod':
                    return super().__getitem__(i)
            
            
            class workerTypes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ClientPayComponentWorkerTypes']:
                        return ClientPayComponentWorkerTypes
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ClientPayComponentWorkerTypes'], typing.List['ClientPayComponentWorkerTypes']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'workerTypes':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ClientPayComponentWorkerTypes':
                    return super().__getitem__(i)
            
            
            class options(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ClientPayComponentOptions']:
                        return ClientPayComponentOptions
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ClientPayComponentOptions'], typing.List['ClientPayComponentOptions']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'options':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ClientPayComponentOptions':
                    return super().__getitem__(i)
            __annotations__ = {
                "payComponent": payComponent,
                "frequencyData": frequencyData,
                "calcMethods": calcMethods,
                "workerTypes": workerTypes,
                "options": options,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payComponent"]) -> 'PayComponent': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["frequencyData"]) -> 'ClientPayComponentFrequency': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["calcMethods"]) -> MetaOapg.properties.calcMethods: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workerTypes"]) -> MetaOapg.properties.workerTypes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["options"]) -> MetaOapg.properties.options: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["payComponent", "frequencyData", "calcMethods", "workerTypes", "options", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payComponent"]) -> typing.Union['PayComponent', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["frequencyData"]) -> typing.Union['ClientPayComponentFrequency', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["calcMethods"]) -> typing.Union[MetaOapg.properties.calcMethods, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workerTypes"]) -> typing.Union[MetaOapg.properties.workerTypes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["options"]) -> typing.Union[MetaOapg.properties.options, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["payComponent", "frequencyData", "calcMethods", "workerTypes", "options", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        payComponent: typing.Union['PayComponent', schemas.Unset] = schemas.unset,
        frequencyData: typing.Union['ClientPayComponentFrequency', schemas.Unset] = schemas.unset,
        calcMethods: typing.Union[MetaOapg.properties.calcMethods, list, tuple, schemas.Unset] = schemas.unset,
        workerTypes: typing.Union[MetaOapg.properties.workerTypes, list, tuple, schemas.Unset] = schemas.unset,
        options: typing.Union[MetaOapg.properties.options, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ClientPayComponentResponse':
        return super().__new__(
            cls,
            *args,
            payComponent=payComponent,
            frequencyData=frequencyData,
            calcMethods=calcMethods,
            workerTypes=workerTypes,
            options=options,
            _configuration=_configuration,
            **kwargs,
        )

from paychex_python_sdk.model.calc_method import CalcMethod
from paychex_python_sdk.model.client_pay_component_frequency import ClientPayComponentFrequency
from paychex_python_sdk.model.client_pay_component_options import ClientPayComponentOptions
from paychex_python_sdk.model.client_pay_component_worker_types import ClientPayComponentWorkerTypes
from paychex_python_sdk.model.pay_component import PayComponent
