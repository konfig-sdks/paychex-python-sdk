# coding: utf-8

"""
    External API

      # Developer Resources  Refer [Developer Resources](https://developer.paychex.com/resources/overview/) for more details on API specification 

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from paychex_python_sdk import schemas  # noqa: F401


class Status(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The workers employment status information. This data field cannot be POSTED and PATCHED for IN_PROGRESS worker.
    """


    class MetaOapg:
        
        class properties:
            workerStatusId = schemas.StrSchema
            
            
            class statusType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "ACTIVE": "ACTIVE",
                        "INACTIVE": "INACTIVE",
                        "TERMINATED": "TERMINATED",
                        "PENDING": "PENDING",
                        "IN_PROGRESS": "IN_PROGRESS",
                    }
                
                @schemas.classproperty
                def ACTIVE(cls):
                    return cls("ACTIVE")
                
                @schemas.classproperty
                def INACTIVE(cls):
                    return cls("INACTIVE")
                
                @schemas.classproperty
                def TERMINATED(cls):
                    return cls("TERMINATED")
                
                @schemas.classproperty
                def PENDING(cls):
                    return cls("PENDING")
                
                @schemas.classproperty
                def IN_PROGRESS(cls):
                    return cls("IN_PROGRESS")
            statusReason = schemas.StrSchema
            __annotations__ = {
                "workerStatusId": workerStatusId,
                "statusType": statusType,
                "statusReason": statusReason,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workerStatusId"]) -> MetaOapg.properties.workerStatusId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusType"]) -> MetaOapg.properties.statusType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusReason"]) -> MetaOapg.properties.statusReason: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["workerStatusId", "statusType", "statusReason", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workerStatusId"]) -> typing.Union[MetaOapg.properties.workerStatusId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusType"]) -> typing.Union[MetaOapg.properties.statusType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusReason"]) -> typing.Union[MetaOapg.properties.statusReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["workerStatusId", "statusType", "statusReason", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        workerStatusId: typing.Union[MetaOapg.properties.workerStatusId, str, schemas.Unset] = schemas.unset,
        statusType: typing.Union[MetaOapg.properties.statusType, str, schemas.Unset] = schemas.unset,
        statusReason: typing.Union[MetaOapg.properties.statusReason, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Status':
        return super().__new__(
            cls,
            *args,
            workerStatusId=workerStatusId,
            statusType=statusType,
            statusReason=statusReason,
            _configuration=_configuration,
            **kwargs,
        )
