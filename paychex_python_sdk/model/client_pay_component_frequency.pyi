# coding: utf-8

"""
    External API

      # Developer Resources  Refer [Developer Resources](https://developer.paychex.com/resources/overview/) for more details on API specification 

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from paychex_python_sdk import schemas  # noqa: F401


class ClientPayComponentFrequency(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            cfId = schemas.Int64Schema
            frequencyOptionId = schemas.Int64Schema
            freqTypeId = schemas.Int64Schema
            frequencyType = schemas.StrSchema
            freqType = schemas.StrSchema
            payFreqId = schemas.Int64Schema
            payFrequency = schemas.StrSchema
            payFreq = schemas.StrSchema
            firstPeriodOccurrenceId = schemas.Int64Schema
            firstPeriodOccurrenceType = schemas.StrSchema
            firstFrequencyPeriod = schemas.StrSchema
            firstPeriodOccurrence = schemas.StrSchema
            secondPeriodOccurrenceId = schemas.Int64Schema
            secondPeriodOccurrenceType = schemas.StrSchema
            secondFrequencyPeriod = schemas.StrSchema
            secondPeriodOccurrence = schemas.StrSchema
            intervalValue = schemas.Int32Schema
            firstCheckRuleId = schemas.Int64Schema
            firstCheckRuleType = schemas.StrSchema
            firstCheckRule = schemas.StrSchema
            firstCheckOnly = schemas.BoolSchema
            __annotations__ = {
                "cfId": cfId,
                "frequencyOptionId": frequencyOptionId,
                "freqTypeId": freqTypeId,
                "frequencyType": frequencyType,
                "freqType": freqType,
                "payFreqId": payFreqId,
                "payFrequency": payFrequency,
                "payFreq": payFreq,
                "firstPeriodOccurrenceId": firstPeriodOccurrenceId,
                "firstPeriodOccurrenceType": firstPeriodOccurrenceType,
                "firstFrequencyPeriod": firstFrequencyPeriod,
                "firstPeriodOccurrence": firstPeriodOccurrence,
                "secondPeriodOccurrenceId": secondPeriodOccurrenceId,
                "secondPeriodOccurrenceType": secondPeriodOccurrenceType,
                "secondFrequencyPeriod": secondFrequencyPeriod,
                "secondPeriodOccurrence": secondPeriodOccurrence,
                "intervalValue": intervalValue,
                "firstCheckRuleId": firstCheckRuleId,
                "firstCheckRuleType": firstCheckRuleType,
                "firstCheckRule": firstCheckRule,
                "firstCheckOnly": firstCheckOnly,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cfId"]) -> MetaOapg.properties.cfId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["frequencyOptionId"]) -> MetaOapg.properties.frequencyOptionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["freqTypeId"]) -> MetaOapg.properties.freqTypeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["frequencyType"]) -> MetaOapg.properties.frequencyType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["freqType"]) -> MetaOapg.properties.freqType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payFreqId"]) -> MetaOapg.properties.payFreqId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payFrequency"]) -> MetaOapg.properties.payFrequency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payFreq"]) -> MetaOapg.properties.payFreq: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstPeriodOccurrenceId"]) -> MetaOapg.properties.firstPeriodOccurrenceId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstPeriodOccurrenceType"]) -> MetaOapg.properties.firstPeriodOccurrenceType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstFrequencyPeriod"]) -> MetaOapg.properties.firstFrequencyPeriod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstPeriodOccurrence"]) -> MetaOapg.properties.firstPeriodOccurrence: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secondPeriodOccurrenceId"]) -> MetaOapg.properties.secondPeriodOccurrenceId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secondPeriodOccurrenceType"]) -> MetaOapg.properties.secondPeriodOccurrenceType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secondFrequencyPeriod"]) -> MetaOapg.properties.secondFrequencyPeriod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secondPeriodOccurrence"]) -> MetaOapg.properties.secondPeriodOccurrence: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["intervalValue"]) -> MetaOapg.properties.intervalValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstCheckRuleId"]) -> MetaOapg.properties.firstCheckRuleId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstCheckRuleType"]) -> MetaOapg.properties.firstCheckRuleType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstCheckRule"]) -> MetaOapg.properties.firstCheckRule: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstCheckOnly"]) -> MetaOapg.properties.firstCheckOnly: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cfId", "frequencyOptionId", "freqTypeId", "frequencyType", "freqType", "payFreqId", "payFrequency", "payFreq", "firstPeriodOccurrenceId", "firstPeriodOccurrenceType", "firstFrequencyPeriod", "firstPeriodOccurrence", "secondPeriodOccurrenceId", "secondPeriodOccurrenceType", "secondFrequencyPeriod", "secondPeriodOccurrence", "intervalValue", "firstCheckRuleId", "firstCheckRuleType", "firstCheckRule", "firstCheckOnly", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cfId"]) -> typing.Union[MetaOapg.properties.cfId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["frequencyOptionId"]) -> typing.Union[MetaOapg.properties.frequencyOptionId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["freqTypeId"]) -> typing.Union[MetaOapg.properties.freqTypeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["frequencyType"]) -> typing.Union[MetaOapg.properties.frequencyType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["freqType"]) -> typing.Union[MetaOapg.properties.freqType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payFreqId"]) -> typing.Union[MetaOapg.properties.payFreqId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payFrequency"]) -> typing.Union[MetaOapg.properties.payFrequency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payFreq"]) -> typing.Union[MetaOapg.properties.payFreq, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstPeriodOccurrenceId"]) -> typing.Union[MetaOapg.properties.firstPeriodOccurrenceId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstPeriodOccurrenceType"]) -> typing.Union[MetaOapg.properties.firstPeriodOccurrenceType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstFrequencyPeriod"]) -> typing.Union[MetaOapg.properties.firstFrequencyPeriod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstPeriodOccurrence"]) -> typing.Union[MetaOapg.properties.firstPeriodOccurrence, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secondPeriodOccurrenceId"]) -> typing.Union[MetaOapg.properties.secondPeriodOccurrenceId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secondPeriodOccurrenceType"]) -> typing.Union[MetaOapg.properties.secondPeriodOccurrenceType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secondFrequencyPeriod"]) -> typing.Union[MetaOapg.properties.secondFrequencyPeriod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secondPeriodOccurrence"]) -> typing.Union[MetaOapg.properties.secondPeriodOccurrence, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["intervalValue"]) -> typing.Union[MetaOapg.properties.intervalValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstCheckRuleId"]) -> typing.Union[MetaOapg.properties.firstCheckRuleId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstCheckRuleType"]) -> typing.Union[MetaOapg.properties.firstCheckRuleType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstCheckRule"]) -> typing.Union[MetaOapg.properties.firstCheckRule, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstCheckOnly"]) -> typing.Union[MetaOapg.properties.firstCheckOnly, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cfId", "frequencyOptionId", "freqTypeId", "frequencyType", "freqType", "payFreqId", "payFrequency", "payFreq", "firstPeriodOccurrenceId", "firstPeriodOccurrenceType", "firstFrequencyPeriod", "firstPeriodOccurrence", "secondPeriodOccurrenceId", "secondPeriodOccurrenceType", "secondFrequencyPeriod", "secondPeriodOccurrence", "intervalValue", "firstCheckRuleId", "firstCheckRuleType", "firstCheckRule", "firstCheckOnly", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        cfId: typing.Union[MetaOapg.properties.cfId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        frequencyOptionId: typing.Union[MetaOapg.properties.frequencyOptionId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        freqTypeId: typing.Union[MetaOapg.properties.freqTypeId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        frequencyType: typing.Union[MetaOapg.properties.frequencyType, str, schemas.Unset] = schemas.unset,
        freqType: typing.Union[MetaOapg.properties.freqType, str, schemas.Unset] = schemas.unset,
        payFreqId: typing.Union[MetaOapg.properties.payFreqId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        payFrequency: typing.Union[MetaOapg.properties.payFrequency, str, schemas.Unset] = schemas.unset,
        payFreq: typing.Union[MetaOapg.properties.payFreq, str, schemas.Unset] = schemas.unset,
        firstPeriodOccurrenceId: typing.Union[MetaOapg.properties.firstPeriodOccurrenceId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        firstPeriodOccurrenceType: typing.Union[MetaOapg.properties.firstPeriodOccurrenceType, str, schemas.Unset] = schemas.unset,
        firstFrequencyPeriod: typing.Union[MetaOapg.properties.firstFrequencyPeriod, str, schemas.Unset] = schemas.unset,
        firstPeriodOccurrence: typing.Union[MetaOapg.properties.firstPeriodOccurrence, str, schemas.Unset] = schemas.unset,
        secondPeriodOccurrenceId: typing.Union[MetaOapg.properties.secondPeriodOccurrenceId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        secondPeriodOccurrenceType: typing.Union[MetaOapg.properties.secondPeriodOccurrenceType, str, schemas.Unset] = schemas.unset,
        secondFrequencyPeriod: typing.Union[MetaOapg.properties.secondFrequencyPeriod, str, schemas.Unset] = schemas.unset,
        secondPeriodOccurrence: typing.Union[MetaOapg.properties.secondPeriodOccurrence, str, schemas.Unset] = schemas.unset,
        intervalValue: typing.Union[MetaOapg.properties.intervalValue, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        firstCheckRuleId: typing.Union[MetaOapg.properties.firstCheckRuleId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        firstCheckRuleType: typing.Union[MetaOapg.properties.firstCheckRuleType, str, schemas.Unset] = schemas.unset,
        firstCheckRule: typing.Union[MetaOapg.properties.firstCheckRule, str, schemas.Unset] = schemas.unset,
        firstCheckOnly: typing.Union[MetaOapg.properties.firstCheckOnly, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ClientPayComponentFrequency':
        return super().__new__(
            cls,
            *args,
            cfId=cfId,
            frequencyOptionId=frequencyOptionId,
            freqTypeId=freqTypeId,
            frequencyType=frequencyType,
            freqType=freqType,
            payFreqId=payFreqId,
            payFrequency=payFrequency,
            payFreq=payFreq,
            firstPeriodOccurrenceId=firstPeriodOccurrenceId,
            firstPeriodOccurrenceType=firstPeriodOccurrenceType,
            firstFrequencyPeriod=firstFrequencyPeriod,
            firstPeriodOccurrence=firstPeriodOccurrence,
            secondPeriodOccurrenceId=secondPeriodOccurrenceId,
            secondPeriodOccurrenceType=secondPeriodOccurrenceType,
            secondFrequencyPeriod=secondFrequencyPeriod,
            secondPeriodOccurrence=secondPeriodOccurrence,
            intervalValue=intervalValue,
            firstCheckRuleId=firstCheckRuleId,
            firstCheckRuleType=firstCheckRuleType,
            firstCheckRule=firstCheckRule,
            firstCheckOnly=firstCheckOnly,
            _configuration=_configuration,
            **kwargs,
        )
