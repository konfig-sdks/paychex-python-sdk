# coding: utf-8

"""
    External API

      # Developer Resources  Refer [Developer Resources](https://developer.paychex.com/resources/overview/) for more details on API specification 

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from paychex_python_sdk import schemas  # noqa: F401


class PayComponentFrequencyTypeResource(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Pay Component Frequency
    """


    class MetaOapg:
        
        class properties:
            applied = schemas.StrSchema
            occurrence = schemas.StrSchema
        
            @staticmethod
            def occurrenceIntervals() -> typing.Type['FrequencyIntervalsResource']:
                return FrequencyIntervalsResource
            __annotations__ = {
                "applied": applied,
                "occurrence": occurrence,
                "occurrenceIntervals": occurrenceIntervals,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["applied"]) -> MetaOapg.properties.applied: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["occurrence"]) -> MetaOapg.properties.occurrence: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["occurrenceIntervals"]) -> 'FrequencyIntervalsResource': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["applied", "occurrence", "occurrenceIntervals", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["applied"]) -> typing.Union[MetaOapg.properties.applied, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["occurrence"]) -> typing.Union[MetaOapg.properties.occurrence, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["occurrenceIntervals"]) -> typing.Union['FrequencyIntervalsResource', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["applied", "occurrence", "occurrenceIntervals", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        applied: typing.Union[MetaOapg.properties.applied, str, schemas.Unset] = schemas.unset,
        occurrence: typing.Union[MetaOapg.properties.occurrence, str, schemas.Unset] = schemas.unset,
        occurrenceIntervals: typing.Union['FrequencyIntervalsResource', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PayComponentFrequencyTypeResource':
        return super().__new__(
            cls,
            *args,
            applied=applied,
            occurrence=occurrence,
            occurrenceIntervals=occurrenceIntervals,
            _configuration=_configuration,
            **kwargs,
        )

from paychex_python_sdk.model.frequency_intervals_resource import FrequencyIntervalsResource
