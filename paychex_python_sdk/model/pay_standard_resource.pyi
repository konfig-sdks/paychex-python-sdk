# coding: utf-8

"""
    External API

      # Developer Resources  Refer [Developer Resources](https://developer.paychex.com/resources/overview/) for more details on API specification 

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from paychex_python_sdk import schemas  # noqa: F401


class PayStandardResource(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Worker Pay Standard
    """


    class MetaOapg:
        
        class properties:
            
            
            class payFrequency(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def WEEKLY(cls):
                    return cls("WEEKLY")
                
                @schemas.classproperty
                def BI_WEEKLY(cls):
                    return cls("BI_WEEKLY")
                
                @schemas.classproperty
                def SEMI_MONTHLY(cls):
                    return cls("SEMI_MONTHLY")
                
                @schemas.classproperty
                def MONTHLY(cls):
                    return cls("MONTHLY")
            overtimeFactor = schemas.StrSchema
            calculatedPayPeriod = schemas.StrSchema
            calculatedAnnualSalary = schemas.StrSchema
            __annotations__ = {
                "payFrequency": payFrequency,
                "overtimeFactor": overtimeFactor,
                "calculatedPayPeriod": calculatedPayPeriod,
                "calculatedAnnualSalary": calculatedAnnualSalary,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payFrequency"]) -> MetaOapg.properties.payFrequency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["overtimeFactor"]) -> MetaOapg.properties.overtimeFactor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["calculatedPayPeriod"]) -> MetaOapg.properties.calculatedPayPeriod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["calculatedAnnualSalary"]) -> MetaOapg.properties.calculatedAnnualSalary: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["payFrequency", "overtimeFactor", "calculatedPayPeriod", "calculatedAnnualSalary", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payFrequency"]) -> typing.Union[MetaOapg.properties.payFrequency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["overtimeFactor"]) -> typing.Union[MetaOapg.properties.overtimeFactor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["calculatedPayPeriod"]) -> typing.Union[MetaOapg.properties.calculatedPayPeriod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["calculatedAnnualSalary"]) -> typing.Union[MetaOapg.properties.calculatedAnnualSalary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["payFrequency", "overtimeFactor", "calculatedPayPeriod", "calculatedAnnualSalary", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        payFrequency: typing.Union[MetaOapg.properties.payFrequency, str, schemas.Unset] = schemas.unset,
        overtimeFactor: typing.Union[MetaOapg.properties.overtimeFactor, str, schemas.Unset] = schemas.unset,
        calculatedPayPeriod: typing.Union[MetaOapg.properties.calculatedPayPeriod, str, schemas.Unset] = schemas.unset,
        calculatedAnnualSalary: typing.Union[MetaOapg.properties.calculatedAnnualSalary, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PayStandardResource':
        return super().__new__(
            cls,
            *args,
            payFrequency=payFrequency,
            overtimeFactor=overtimeFactor,
            calculatedPayPeriod=calculatedPayPeriod,
            calculatedAnnualSalary=calculatedAnnualSalary,
            _configuration=_configuration,
            **kwargs,
        )
