# coding: utf-8

"""
    External API

      # Developer Resources  Refer [Developer Resources](https://developer.paychex.com/resources/overview/) for more details on API specification 

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from paychex_python_sdk import schemas  # noqa: F401


class PayRateResource(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Worker Pay Rate
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
            rateId = schemas.StrSchema
            startDate = schemas.DateTimeSchema
            rateNumber = schemas.StrSchema
            
            
            class rateType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ANNUAL_SALARY(cls):
                    return cls("ANNUAL_SALARY")
                
                @schemas.classproperty
                def PER_PAY_PERIOD_SALARY(cls):
                    return cls("PER_PAY_PERIOD_SALARY")
                
                @schemas.classproperty
                def PIECEWORK_RATE(cls):
                    return cls("PIECEWORK_RATE")
                
                @schemas.classproperty
                def DAILY_RATE(cls):
                    return cls("DAILY_RATE")
                
                @schemas.classproperty
                def HOURLY_RATE(cls):
                    return cls("HOURLY_RATE")
            amount = schemas.StrSchema
            standardHours = schemas.StrSchema
            standardOvertime = schemas.StrSchema
            default = schemas.BoolSchema
            effectiveDate = schemas.StrSchema
            
            
            class links(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Link']:
                        return Link
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Link'], typing.List['Link']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'links':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Link':
                    return super().__getitem__(i)
            __annotations__ = {
                "description": description,
                "rateId": rateId,
                "startDate": startDate,
                "rateNumber": rateNumber,
                "rateType": rateType,
                "amount": amount,
                "standardHours": standardHours,
                "standardOvertime": standardOvertime,
                "default": default,
                "effectiveDate": effectiveDate,
                "links": links,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rateId"]) -> MetaOapg.properties.rateId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rateNumber"]) -> MetaOapg.properties.rateNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rateType"]) -> MetaOapg.properties.rateType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["standardHours"]) -> MetaOapg.properties.standardHours: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["standardOvertime"]) -> MetaOapg.properties.standardOvertime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default"]) -> MetaOapg.properties.default: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["effectiveDate"]) -> MetaOapg.properties.effectiveDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["links"]) -> MetaOapg.properties.links: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "rateId", "startDate", "rateNumber", "rateType", "amount", "standardHours", "standardOvertime", "default", "effectiveDate", "links", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rateId"]) -> typing.Union[MetaOapg.properties.rateId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startDate"]) -> typing.Union[MetaOapg.properties.startDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rateNumber"]) -> typing.Union[MetaOapg.properties.rateNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rateType"]) -> typing.Union[MetaOapg.properties.rateType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["standardHours"]) -> typing.Union[MetaOapg.properties.standardHours, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["standardOvertime"]) -> typing.Union[MetaOapg.properties.standardOvertime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default"]) -> typing.Union[MetaOapg.properties.default, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["effectiveDate"]) -> typing.Union[MetaOapg.properties.effectiveDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["links"]) -> typing.Union[MetaOapg.properties.links, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "rateId", "startDate", "rateNumber", "rateType", "amount", "standardHours", "standardOvertime", "default", "effectiveDate", "links", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        rateId: typing.Union[MetaOapg.properties.rateId, str, schemas.Unset] = schemas.unset,
        startDate: typing.Union[MetaOapg.properties.startDate, str, datetime, schemas.Unset] = schemas.unset,
        rateNumber: typing.Union[MetaOapg.properties.rateNumber, str, schemas.Unset] = schemas.unset,
        rateType: typing.Union[MetaOapg.properties.rateType, str, schemas.Unset] = schemas.unset,
        amount: typing.Union[MetaOapg.properties.amount, str, schemas.Unset] = schemas.unset,
        standardHours: typing.Union[MetaOapg.properties.standardHours, str, schemas.Unset] = schemas.unset,
        standardOvertime: typing.Union[MetaOapg.properties.standardOvertime, str, schemas.Unset] = schemas.unset,
        default: typing.Union[MetaOapg.properties.default, bool, schemas.Unset] = schemas.unset,
        effectiveDate: typing.Union[MetaOapg.properties.effectiveDate, str, schemas.Unset] = schemas.unset,
        links: typing.Union[MetaOapg.properties.links, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PayRateResource':
        return super().__new__(
            cls,
            *args,
            description=description,
            rateId=rateId,
            startDate=startDate,
            rateNumber=rateNumber,
            rateType=rateType,
            amount=amount,
            standardHours=standardHours,
            standardOvertime=standardOvertime,
            default=default,
            effectiveDate=effectiveDate,
            links=links,
            _configuration=_configuration,
            **kwargs,
        )

from paychex_python_sdk.model.link import Link
