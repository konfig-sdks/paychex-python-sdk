# coding: utf-8

"""
    External API

      # Developer Resources  Refer [Developer Resources](https://developer.paychex.com/resources/overview/) for more details on API specification 

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from paychex_python_sdk import schemas  # noqa: F401


class CustomFieldsResource(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            customFieldId = schemas.StrSchema
            customFieldName = schemas.StrSchema
            categoryId = schemas.StrSchema
            required = schemas.BoolSchema
            checkStub = schemas.BoolSchema
            employeeEditable = schemas.BoolSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def DROPDOWN(cls):
                    return cls("DROPDOWN")
                
                @schemas.classproperty
                def TEXT(cls):
                    return cls("TEXT")
                
                @schemas.classproperty
                def BOOLEAN(cls):
                    return cls("BOOLEAN")
                
                @schemas.classproperty
                def DATE(cls):
                    return cls("DATE")
                
                @schemas.classproperty
                def NUMERIC_NUMERIC__0_00__OR_NUMERIC__0_0000_(cls):
                    return cls("NUMERIC, NUMERIC__0_00_ OR NUMERIC__0_0000_")
            booleanValue = schemas.BoolSchema
            
            
            class links(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Link']:
                        return Link
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Link'], typing.List['Link']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'links':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Link':
                    return super().__getitem__(i)
            dateValue = schemas.DateTimeSchema
            textValue = schemas.StrSchema
            maxTextLength = schemas.NumberSchema
            numericValue = schemas.NumberSchema
            
            
            class dropdown(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CustomFieldsDropdownResource']:
                        return CustomFieldsDropdownResource
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['CustomFieldsDropdownResource'], typing.List['CustomFieldsDropdownResource']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dropdown':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CustomFieldsDropdownResource':
                    return super().__getitem__(i)
            __annotations__ = {
                "customFieldId": customFieldId,
                "customFieldName": customFieldName,
                "categoryId": categoryId,
                "required": required,
                "checkStub": checkStub,
                "employeeEditable": employeeEditable,
                "type": type,
                "booleanValue": booleanValue,
                "links": links,
                "dateValue": dateValue,
                "textValue": textValue,
                "maxTextLength": maxTextLength,
                "numericValue": numericValue,
                "dropdown": dropdown,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customFieldId"]) -> MetaOapg.properties.customFieldId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customFieldName"]) -> MetaOapg.properties.customFieldName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["categoryId"]) -> MetaOapg.properties.categoryId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["required"]) -> MetaOapg.properties.required: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["checkStub"]) -> MetaOapg.properties.checkStub: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeEditable"]) -> MetaOapg.properties.employeeEditable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["booleanValue"]) -> MetaOapg.properties.booleanValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["links"]) -> MetaOapg.properties.links: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateValue"]) -> MetaOapg.properties.dateValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["textValue"]) -> MetaOapg.properties.textValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxTextLength"]) -> MetaOapg.properties.maxTextLength: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["numericValue"]) -> MetaOapg.properties.numericValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dropdown"]) -> MetaOapg.properties.dropdown: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["customFieldId", "customFieldName", "categoryId", "required", "checkStub", "employeeEditable", "type", "booleanValue", "links", "dateValue", "textValue", "maxTextLength", "numericValue", "dropdown", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customFieldId"]) -> typing.Union[MetaOapg.properties.customFieldId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customFieldName"]) -> typing.Union[MetaOapg.properties.customFieldName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["categoryId"]) -> typing.Union[MetaOapg.properties.categoryId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["required"]) -> typing.Union[MetaOapg.properties.required, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["checkStub"]) -> typing.Union[MetaOapg.properties.checkStub, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeEditable"]) -> typing.Union[MetaOapg.properties.employeeEditable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["booleanValue"]) -> typing.Union[MetaOapg.properties.booleanValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["links"]) -> typing.Union[MetaOapg.properties.links, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateValue"]) -> typing.Union[MetaOapg.properties.dateValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["textValue"]) -> typing.Union[MetaOapg.properties.textValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxTextLength"]) -> typing.Union[MetaOapg.properties.maxTextLength, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["numericValue"]) -> typing.Union[MetaOapg.properties.numericValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dropdown"]) -> typing.Union[MetaOapg.properties.dropdown, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["customFieldId", "customFieldName", "categoryId", "required", "checkStub", "employeeEditable", "type", "booleanValue", "links", "dateValue", "textValue", "maxTextLength", "numericValue", "dropdown", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        customFieldId: typing.Union[MetaOapg.properties.customFieldId, str, schemas.Unset] = schemas.unset,
        customFieldName: typing.Union[MetaOapg.properties.customFieldName, str, schemas.Unset] = schemas.unset,
        categoryId: typing.Union[MetaOapg.properties.categoryId, str, schemas.Unset] = schemas.unset,
        required: typing.Union[MetaOapg.properties.required, bool, schemas.Unset] = schemas.unset,
        checkStub: typing.Union[MetaOapg.properties.checkStub, bool, schemas.Unset] = schemas.unset,
        employeeEditable: typing.Union[MetaOapg.properties.employeeEditable, bool, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        booleanValue: typing.Union[MetaOapg.properties.booleanValue, bool, schemas.Unset] = schemas.unset,
        links: typing.Union[MetaOapg.properties.links, list, tuple, schemas.Unset] = schemas.unset,
        dateValue: typing.Union[MetaOapg.properties.dateValue, str, datetime, schemas.Unset] = schemas.unset,
        textValue: typing.Union[MetaOapg.properties.textValue, str, schemas.Unset] = schemas.unset,
        maxTextLength: typing.Union[MetaOapg.properties.maxTextLength, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        numericValue: typing.Union[MetaOapg.properties.numericValue, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        dropdown: typing.Union[MetaOapg.properties.dropdown, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CustomFieldsResource':
        return super().__new__(
            cls,
            *args,
            customFieldId=customFieldId,
            customFieldName=customFieldName,
            categoryId=categoryId,
            required=required,
            checkStub=checkStub,
            employeeEditable=employeeEditable,
            type=type,
            booleanValue=booleanValue,
            links=links,
            dateValue=dateValue,
            textValue=textValue,
            maxTextLength=maxTextLength,
            numericValue=numericValue,
            dropdown=dropdown,
            _configuration=_configuration,
            **kwargs,
        )

from paychex_python_sdk.model.custom_fields_dropdown_resource import CustomFieldsDropdownResource
from paychex_python_sdk.model.link import Link
