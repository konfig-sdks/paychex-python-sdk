# coding: utf-8

"""
    External API

      # Developer Resources  Refer [Developer Resources](https://developer.paychex.com/resources/overview/) for more details on API specification 

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from paychex_python_sdk import schemas  # noqa: F401


class PostalResource(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The postal communications for this contact.
    """


    class MetaOapg:
        
        class properties:
            communicationId = schemas.StrSchema
            streetLineOne = schemas.StrSchema
            streetLineTwo = schemas.StrSchema
            postOfficeBox = schemas.StrSchema
            city = schemas.StrSchema
            postalCode = schemas.StrSchema
            countrySubdivisionCode = schemas.StrSchema
            countryCode = schemas.StrSchema
            __annotations__ = {
                "communicationId": communicationId,
                "streetLineOne": streetLineOne,
                "streetLineTwo": streetLineTwo,
                "postOfficeBox": postOfficeBox,
                "city": city,
                "postalCode": postalCode,
                "countrySubdivisionCode": countrySubdivisionCode,
                "countryCode": countryCode,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["communicationId"]) -> MetaOapg.properties.communicationId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["streetLineOne"]) -> MetaOapg.properties.streetLineOne: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["streetLineTwo"]) -> MetaOapg.properties.streetLineTwo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postOfficeBox"]) -> MetaOapg.properties.postOfficeBox: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postalCode"]) -> MetaOapg.properties.postalCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["countrySubdivisionCode"]) -> MetaOapg.properties.countrySubdivisionCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["countryCode"]) -> MetaOapg.properties.countryCode: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["communicationId", "streetLineOne", "streetLineTwo", "postOfficeBox", "city", "postalCode", "countrySubdivisionCode", "countryCode", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["communicationId"]) -> typing.Union[MetaOapg.properties.communicationId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["streetLineOne"]) -> typing.Union[MetaOapg.properties.streetLineOne, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["streetLineTwo"]) -> typing.Union[MetaOapg.properties.streetLineTwo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postOfficeBox"]) -> typing.Union[MetaOapg.properties.postOfficeBox, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> typing.Union[MetaOapg.properties.city, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postalCode"]) -> typing.Union[MetaOapg.properties.postalCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["countrySubdivisionCode"]) -> typing.Union[MetaOapg.properties.countrySubdivisionCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["countryCode"]) -> typing.Union[MetaOapg.properties.countryCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["communicationId", "streetLineOne", "streetLineTwo", "postOfficeBox", "city", "postalCode", "countrySubdivisionCode", "countryCode", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        communicationId: typing.Union[MetaOapg.properties.communicationId, str, schemas.Unset] = schemas.unset,
        streetLineOne: typing.Union[MetaOapg.properties.streetLineOne, str, schemas.Unset] = schemas.unset,
        streetLineTwo: typing.Union[MetaOapg.properties.streetLineTwo, str, schemas.Unset] = schemas.unset,
        postOfficeBox: typing.Union[MetaOapg.properties.postOfficeBox, str, schemas.Unset] = schemas.unset,
        city: typing.Union[MetaOapg.properties.city, str, schemas.Unset] = schemas.unset,
        postalCode: typing.Union[MetaOapg.properties.postalCode, str, schemas.Unset] = schemas.unset,
        countrySubdivisionCode: typing.Union[MetaOapg.properties.countrySubdivisionCode, str, schemas.Unset] = schemas.unset,
        countryCode: typing.Union[MetaOapg.properties.countryCode, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PostalResource':
        return super().__new__(
            cls,
            *args,
            communicationId=communicationId,
            streetLineOne=streetLineOne,
            streetLineTwo=streetLineTwo,
            postOfficeBox=postOfficeBox,
            city=city,
            postalCode=postalCode,
            countrySubdivisionCode=countrySubdivisionCode,
            countryCode=countryCode,
            _configuration=_configuration,
            **kwargs,
        )
