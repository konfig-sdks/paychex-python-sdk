# coding: utf-8

"""
    External API

      # Developer Resources  Refer [Developer Resources](https://developer.paychex.com/resources/overview/) for more details on API specification 

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from paychex_python_sdk import schemas  # noqa: F401


class ReportResource(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            documentName = schemas.StrSchema
        
            @staticmethod
            def documentContent() -> typing.Type['ReportResourceDocumentContent']:
                return ReportResourceDocumentContent
            fileName = schemas.StrSchema
            type = schemas.StrSchema
            size = schemas.Int64Schema
            successIndicator = schemas.BoolSchema
            __annotations__ = {
                "documentName": documentName,
                "documentContent": documentContent,
                "fileName": fileName,
                "type": type,
                "size": size,
                "successIndicator": successIndicator,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["documentName"]) -> MetaOapg.properties.documentName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["documentContent"]) -> 'ReportResourceDocumentContent': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fileName"]) -> MetaOapg.properties.fileName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["size"]) -> MetaOapg.properties.size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["successIndicator"]) -> MetaOapg.properties.successIndicator: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["documentName", "documentContent", "fileName", "type", "size", "successIndicator", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["documentName"]) -> typing.Union[MetaOapg.properties.documentName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["documentContent"]) -> typing.Union['ReportResourceDocumentContent', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fileName"]) -> typing.Union[MetaOapg.properties.fileName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["size"]) -> typing.Union[MetaOapg.properties.size, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["successIndicator"]) -> typing.Union[MetaOapg.properties.successIndicator, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["documentName", "documentContent", "fileName", "type", "size", "successIndicator", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        documentName: typing.Union[MetaOapg.properties.documentName, str, schemas.Unset] = schemas.unset,
        documentContent: typing.Union['ReportResourceDocumentContent', schemas.Unset] = schemas.unset,
        fileName: typing.Union[MetaOapg.properties.fileName, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        size: typing.Union[MetaOapg.properties.size, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        successIndicator: typing.Union[MetaOapg.properties.successIndicator, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ReportResource':
        return super().__new__(
            cls,
            *args,
            documentName=documentName,
            documentContent=documentContent,
            fileName=fileName,
            type=type,
            size=size,
            successIndicator=successIndicator,
            _configuration=_configuration,
            **kwargs,
        )

from paychex_python_sdk.model.report_resource_document_content import ReportResourceDocumentContent
