# coding: utf-8

"""
    External API

      # Developer Resources  Refer [Developer Resources](https://developer.paychex.com/resources/overview/) for more details on API specification 

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from paychex_python_sdk import schemas  # noqa: F401


class ClientAddress(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            id = schemas.Int64Schema
            addressUsageType = schemas.StrSchema
            createdDate = schemas.DateTimeSchema
            createdByApplicationName = schemas.StrSchema
            createdByUserId = schemas.StrSchema
            createdByApplicationSubProcessName = schemas.StrSchema
        
            @staticmethod
            def client() -> typing.Type['Client']:
                return Client
            
            
            class clientAddressVersions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ClientAddressVersion']:
                        return ClientAddressVersion
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ClientAddressVersion'], typing.List['ClientAddressVersion']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'clientAddressVersions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ClientAddressVersion':
                    return super().__getitem__(i)
            __annotations__ = {
                "id": id,
                "addressUsageType": addressUsageType,
                "createdDate": createdDate,
                "createdByApplicationName": createdByApplicationName,
                "createdByUserId": createdByUserId,
                "createdByApplicationSubProcessName": createdByApplicationSubProcessName,
                "client": client,
                "clientAddressVersions": clientAddressVersions,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressUsageType"]) -> MetaOapg.properties.addressUsageType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdDate"]) -> MetaOapg.properties.createdDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdByApplicationName"]) -> MetaOapg.properties.createdByApplicationName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdByUserId"]) -> MetaOapg.properties.createdByUserId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdByApplicationSubProcessName"]) -> MetaOapg.properties.createdByApplicationSubProcessName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client"]) -> 'Client': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clientAddressVersions"]) -> MetaOapg.properties.clientAddressVersions: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "addressUsageType", "createdDate", "createdByApplicationName", "createdByUserId", "createdByApplicationSubProcessName", "client", "clientAddressVersions", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressUsageType"]) -> typing.Union[MetaOapg.properties.addressUsageType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdDate"]) -> typing.Union[MetaOapg.properties.createdDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdByApplicationName"]) -> typing.Union[MetaOapg.properties.createdByApplicationName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdByUserId"]) -> typing.Union[MetaOapg.properties.createdByUserId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdByApplicationSubProcessName"]) -> typing.Union[MetaOapg.properties.createdByApplicationSubProcessName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client"]) -> typing.Union['Client', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clientAddressVersions"]) -> typing.Union[MetaOapg.properties.clientAddressVersions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "addressUsageType", "createdDate", "createdByApplicationName", "createdByUserId", "createdByApplicationSubProcessName", "client", "clientAddressVersions", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        addressUsageType: typing.Union[MetaOapg.properties.addressUsageType, str, schemas.Unset] = schemas.unset,
        createdDate: typing.Union[MetaOapg.properties.createdDate, str, datetime, schemas.Unset] = schemas.unset,
        createdByApplicationName: typing.Union[MetaOapg.properties.createdByApplicationName, str, schemas.Unset] = schemas.unset,
        createdByUserId: typing.Union[MetaOapg.properties.createdByUserId, str, schemas.Unset] = schemas.unset,
        createdByApplicationSubProcessName: typing.Union[MetaOapg.properties.createdByApplicationSubProcessName, str, schemas.Unset] = schemas.unset,
        client: typing.Union['Client', schemas.Unset] = schemas.unset,
        clientAddressVersions: typing.Union[MetaOapg.properties.clientAddressVersions, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ClientAddress':
        return super().__new__(
            cls,
            *args,
            id=id,
            addressUsageType=addressUsageType,
            createdDate=createdDate,
            createdByApplicationName=createdByApplicationName,
            createdByUserId=createdByUserId,
            createdByApplicationSubProcessName=createdByApplicationSubProcessName,
            client=client,
            clientAddressVersions=clientAddressVersions,
            _configuration=_configuration,
            **kwargs,
        )

from paychex_python_sdk.model.client import Client
from paychex_python_sdk.model.client_address_version import ClientAddressVersion
